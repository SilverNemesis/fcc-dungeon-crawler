{"version":3,"sources":["lib/map.js","components/App.js","serviceWorker.js","index.js"],"names":["_directions","x","y","generateDungeon","options","width","height","zones","bossRoom","data","push","Array","fill","map","goal","minSize","maxSize","_makeOdd","Math","max","floor","min","roomSize","power","s","count","pow","c","rooms","areaGoal","area","size","_pickRandom","room","random","_generateRooms","sort","pri","sec","priArea","secArea","maxRooms","loc","i","length","j","t","_shuffle","xStep","yStep","zone","_generateZones","placedRooms","roomCount","hasOwnProperty","minX","maxX","minY","maxY","isPlaced","_range","overlap","_doRoomsOverlap","_placeRoomsByZone","undefined","placed","filter","_placeRooms","id","h","w","links","roomConnectors","r1","r2","connectors","cur","nxt","conCount","apl","group","_connectNearbyRooms","_sortRooms_GroupAndId","groups","roomInfoList","alignmentAndDistance","_getAlignmentAndDistance","alignment","distance","horizontal","g1","g2","key","room1","room2","groupConnectors","prop","groupLinks","groupConnector","o","connected","_connectDistantRooms","_sortRooms_Id","value","bx","by","App","props","onResize","bind","onKeyDown","onKeyUp","onAnimationFrame","onClick","keys","state","showOverlay","this","_resizeViewport","_updateMap","window","addEventListener","frame","requestAnimationFrame","removeEventListener","cancelAnimationFrame","event","preventDefault","onKeyPress","captureKeys","scene","keyboardState","player","setState","dx","dy","_drawMap","canvas","rect","getBoundingClientRect","visited","q","top","shift","dir","playerRoom","getPlayerStartingLocation","ctx","getContext","fillStyle","fillRect","cellWidth","cellHeight","xOffset","yOffset","colors","font","textAlign","textBaseline","fillText","toString","boss","JSON","stringify","ref","elem","hidden","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e29b8e49.chunk.js","sourcesContent":["const _directions = [\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 },\r\n  { x: -1, y: 0 }\r\n];\r\n\r\nexport function generateDungeon(options) {\r\n  const { width, height, zones, bossRoom } = options;\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(0));\r\n  }\r\n\r\n  const map = {\r\n    width,\r\n    height,\r\n    data\r\n  }\r\n\r\n  _generateRooms(map, options);\r\n\r\n  _sortRooms_LargestToSmallest(map.rooms);\r\n\r\n  let { maxRooms } = options;\r\n\r\n  if (zones && zones > 1) {\r\n    _generateZones(map, zones);\r\n    if (bossRoom) {\r\n      const room = map.rooms[0];\r\n      const zone = map.zones[0];\r\n      if (room.width <= zone.width && room.height <= zone.height) {\r\n        room.x = Math.floor(zone.x);\r\n        room.y = Math.floor(zone.y + (zone.height - room.height) / 2);\r\n      }\r\n    }\r\n    const placedRooms = _placeRoomsByZone(map, maxRooms);\r\n    if (maxRooms !== undefined) {\r\n      maxRooms -= placedRooms;\r\n    }\r\n  } else {\r\n    if (bossRoom) {\r\n      const room = map.rooms[0];\r\n      if (room.width <= width - 2 && room.height <= height - 2) {\r\n        room.x = Math.floor((width - room.width) / 2);\r\n        room.y = Math.floor((height - room.height) / 2);\r\n      }\r\n    }\r\n  }\r\n\r\n  _placeRooms(map, maxRooms);\r\n\r\n  _connectNearbyRooms(map);\r\n\r\n  _connectDistantRooms(map);\r\n\r\n  _sortRooms_Id(map.rooms);\r\n\r\n  return map;\r\n}\r\n\r\nexport function getPlayerStartingLocation(map) {\r\n  const { width, height, data } = map;\r\n  const visited = [];\r\n  for (let i = 0; i < height; i++) {\r\n    visited.push(new Array(width).fill(0));\r\n  }\r\n  if (map.rooms.length === 0) {\r\n    return { x: 1, y: 1 };\r\n  }\r\n  const bossRoom = map.rooms[0];\r\n  let x = Math.floor(bossRoom.x + bossRoom.width / 2);\r\n  let y = Math.floor(bossRoom.y + bossRoom.height / 2);\r\n  let room = 1;\r\n  const q = [];\r\n  q.push({ x, y });\r\n  while (q.length > 0) {\r\n    const size = q.length;\r\n    for (let i = 0; i < size; i++) {\r\n      const top = q.shift();\r\n      room = data[top.y][top.x];\r\n      for (let j = 0; j < 4; j++) {\r\n        const dir = _directions[j];\r\n        if (top.x + dir.x < 0 || top.x + dir.x > width - 1 || top.y + dir.y < 0 || top.y + dir.y > height - 1) {\r\n          continue;\r\n        }\r\n        if (data[top.y + dir.y][top.x + dir.x] !== 0) {\r\n          if (visited[top.y + dir.y][top.x + dir.x] === 0) {\r\n            visited[top.y + dir.y][top.x + dir.x] = 1;\r\n            q.push({ x: top.x + dir.x, y: top.y + dir.y });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const playerRoom = map.rooms[room - 1];\r\n  x = Math.floor(playerRoom.x + playerRoom.width / 2);\r\n  y = Math.floor(playerRoom.y + playerRoom.height / 2);\r\n  return { x, y };\r\n}\r\n\r\nfunction _generateRooms(map, options) {\r\n  const { width, height } = map;\r\n  let { goal, minSize, maxSize } = options;\r\n  if (!goal) {\r\n    goal = 0.5;\r\n  }\r\n  if (!minSize) {\r\n    minSize = 3;\r\n  }\r\n  if (!maxSize) {\r\n    maxSize = _makeOdd(Math.max(Math.floor(Math.min(width / 4, height / 4)), minSize));;\r\n  }\r\n  const roomSize = [];\r\n  let power = 0;\r\n  for (let s = maxSize; s >= minSize; s -= 2) {\r\n    const count = Math.pow(2, power++);\r\n    for (let c = 0; c < count; c++) {\r\n      roomSize.push(s);\r\n    }\r\n  }\r\n\r\n  let rooms = [];\r\n  const areaGoal = width * height * goal;\r\n  let area = 0;\r\n  while (area < areaGoal) {\r\n    const size = _pickRandom(roomSize);\r\n    const room = { width: size, height: size };\r\n    if (Math.random() > 0.3) {\r\n      if (Math.random() < 0.5) {\r\n        room.width += 2;\r\n      } else {\r\n        room.height += 2;\r\n      }\r\n    }\r\n    rooms.push(room)\r\n    area += room.width * room.height;\r\n  }\r\n  map.rooms = rooms;\r\n}\r\n\r\nfunction _generateZones(map, count) {\r\n  const { width, height } = map;\r\n  const loc = [];\r\n  for (let i = 0; i < count; i++) {\r\n    loc[i] = i;\r\n  }\r\n\r\n  _shuffle(loc);\r\n\r\n  const xStep = Math.floor((width - 2) / count);\r\n  const yStep = Math.floor((height - 2) / count);\r\n\r\n  const zones = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const zone = { x: i * xStep + 1, y: loc[i] * yStep + 1, width: xStep, height: yStep };\r\n    zones.push(zone);\r\n  }\r\n\r\n  map.zones = zones;\r\n}\r\n\r\nfunction _placeRoomsByZone(map, maxRooms) {\r\n  const { width, height, rooms, zones } = map;\r\n\r\n  let placedRooms = 0;\r\n  let zone = 0;\r\n  const roomCount = rooms.length;\r\n  for (let i = 0; i < roomCount; i++) {\r\n    if (maxRooms && placedRooms === maxRooms) {\r\n      break;\r\n    }\r\n    const room = rooms[i];\r\n    if (room.hasOwnProperty('x') && room.hasOwnProperty('y')) {\r\n      continue;\r\n    }\r\n    const minX = zones[zone].x;\r\n    const maxX = Math.min(zones[zone].x + zones[zone].width, width - room.width - 1);\r\n    const minY = zones[zone].y;\r\n    const maxY = Math.min(zones[zone].y + zones[zone].height, height - room.height - 1);\r\n    if (minX + room.width > width - 1 || minY + room.height > height - 1) {\r\n      continue;\r\n    }\r\n    let isPlaced = false;\r\n    for (let t = 0; t < 100; t++) {\r\n      room.x = _makeOdd(_range(minX, maxX));\r\n      room.y = _makeOdd(_range(minY, maxY));\r\n      let overlap = false;\r\n      for (let j = 0; j < roomCount; j++) {\r\n        if (j === i || !rooms[j].hasOwnProperty('x') || !rooms[j].hasOwnProperty('y')) {\r\n          continue;\r\n        }\r\n        if (_doRoomsOverlap(room, rooms[j], 1, 1)) {\r\n          overlap = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!overlap) {\r\n        isPlaced = true;\r\n        break;\r\n      }\r\n    }\r\n    if (isPlaced) {\r\n      placedRooms++;\r\n      zone = (zone + 1) % zones.length;\r\n    } else {\r\n      delete room.x;\r\n      delete room.y;\r\n    }\r\n  }\r\n\r\n  return placedRooms;\r\n}\r\n\r\nfunction _placeRooms(map, maxRooms) {\r\n  const { width, height, rooms } = map;\r\n\r\n  let placedRooms = 0;\r\n  const roomCount = rooms.length;\r\n  for (let i = 0; i < roomCount; i++) {\r\n    if (maxRooms !== undefined && placedRooms === maxRooms) {\r\n      break;\r\n    }\r\n    const room = rooms[i];\r\n    if (room.hasOwnProperty('x') && room.hasOwnProperty('y')) {\r\n      continue;\r\n    }\r\n    let placed = false;\r\n    for (let t = 0; t < 1000; t++) {\r\n      room.x = _makeOdd(_range(1, width - room.width - 1));\r\n      room.y = _makeOdd(_range(1, height - room.height - 1));\r\n      let overlap = false;\r\n      for (let j = 0; j < roomCount; j++) {\r\n        if (j === i || !rooms[j].hasOwnProperty('x') || !rooms[j].hasOwnProperty('y')) {\r\n          continue;\r\n        }\r\n        if (_doRoomsOverlap(room, rooms[j], room.width >= 7 ? 3 : 1, room.height >= 7 ? 3 : 1)) {\r\n          overlap = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!overlap) {\r\n        placed = true;\r\n        break;\r\n      }\r\n    }\r\n    if (placed) {\r\n      placedRooms++;\r\n    } else {\r\n      delete room.x;\r\n      delete room.y;\r\n    }\r\n  }\r\n\r\n  map.rooms = map.rooms.filter((room) => room.x || room.y);\r\n\r\n  return map.rooms.length;\r\n}\r\n\r\nfunction _connectNearbyRooms({ width, height, data, rooms }) {\r\n  const roomCount = rooms.length;\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    room.id = i + 1;\r\n    for (let h = 0; h < room.height; h++) {\r\n      for (let w = 0; w < room.width; w++) {\r\n        data[room.y + h][room.x + w] = room.id;\r\n      }\r\n    }\r\n  }\r\n\r\n  const links = [];\r\n  for (let i = 0; i <= roomCount; i++) {\r\n    links.push(i);\r\n  }\r\n\r\n  const roomConnectors = [];\r\n\r\n  for (let y = 1; y < height - 1; y++) {\r\n    for (let x = 1; x < width - 1; x++) {\r\n      if (data[y][x] === 0) {\r\n        if (data[y - 1][x] === 0 && data[y + 1][x] === 0 && data[y][x - 1] !== 0 && data[y][x + 1] !== 0) {\r\n          if (data[y][x - 1] < data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x - 1], r2: data[y][x + 1] });\r\n          } else if (data[y][x - 1] > data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x + 1], r2: data[y][x - 1] });\r\n          }\r\n        } else if (data[y][x - 1] === 0 && data[y][x + 1] === 0 && data[y - 1][x] !== 0 && data[y + 1][x] !== 0) {\r\n          if (data[y - 1][x] < data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y - 1][x], r2: data[y + 1][x] });\r\n          } else if (data[y - 1][x] > data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y + 1][x], r2: data[y - 1][x] });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _sortRoomConnectors(roomConnectors);\r\n\r\n  const conCount = roomConnectors.length;\r\n  let cur;\r\n  let nxt;\r\n  for (cur = 0; cur < conCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < conCount; nxt++) {\r\n      if (roomConnectors[nxt].r1 !== roomConnectors[cur].r1 || roomConnectors[nxt].r2 !== roomConnectors[cur].r2) {\r\n        break;\r\n      }\r\n    }\r\n    if (links[roomConnectors[cur].r1] !== links[roomConnectors[cur].r2]) {\r\n      const apl = roomConnectors[Math.floor(cur + (nxt - cur) / 2)];\r\n      const min = Math.min(links[apl.r1], links[apl.r2]);\r\n      const max = Math.max(links[apl.r1], links[apl.r2]);\r\n      links[apl.r1] = min;\r\n      links[apl.r2] = min;\r\n      for (let i = 1; i <= roomCount; i++) {\r\n        if (links[i] === max) {\r\n          links[i] = min;\r\n        }\r\n      }\r\n      data[apl.y][apl.x] = roomCount + 1;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    room.group = links[room.id];\r\n  }\r\n}\r\n\r\nfunction _connectDistantRooms(map) {\r\n  const { data, rooms } = map;\r\n\r\n  const roomCount = rooms.length;\r\n\r\n  _sortRooms_GroupAndId(rooms);\r\n\r\n  let groups = 0;\r\n\r\n  let cur;\r\n  let nxt;\r\n\r\n  for (cur = 0; cur < roomCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < roomCount; nxt++) {\r\n      if (rooms[nxt].group !== rooms[cur].group) {\r\n        break;\r\n      }\r\n    }\r\n    groups++;\r\n    for (let apl = cur; apl < nxt; apl++) {\r\n      rooms[apl].group = groups;\r\n    }\r\n  }\r\n\r\n  const roomInfoList = {};\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    for (let j = i + 1; j < roomCount; j++) {\r\n      if (rooms[i].group === rooms[j].group) {\r\n        continue;\r\n      }\r\n\r\n      const alignmentAndDistance = _getAlignmentAndDistance(rooms[i], rooms[j]);\r\n\r\n      if (!alignmentAndDistance) {\r\n        continue;\r\n      }\r\n\r\n      const { alignment, distance, x, y, horizontal } = alignmentAndDistance;\r\n\r\n      if (alignment === 0) {\r\n        continue;\r\n      }\r\n\r\n      const g1 = rooms[i].group;\r\n      const g2 = rooms[j].group;\r\n      const key = g1 + '_' + g2;\r\n\r\n      if (!roomInfoList[key]) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      } else if (roomInfoList[key].distance > distance || (roomInfoList[key].distance === distance && roomInfoList[key].alignment < alignmentAndDistance)) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      }\r\n    }\r\n  }\r\n\r\n  const groupConnectors = [];\r\n\r\n  for (let prop in roomInfoList) {\r\n    if (roomInfoList.hasOwnProperty(prop)) {\r\n      groupConnectors.push(roomInfoList[prop]);\r\n    }\r\n  }\r\n\r\n  _sortGroupConnectors(groupConnectors);\r\n\r\n  const groupLinks = [];\r\n\r\n  for (let i = 0; i <= groups; i++) {\r\n    groupLinks.push(i);\r\n  }\r\n\r\n  for (let i = 0; i < groupConnectors.length; i++) {\r\n    const groupConnector = groupConnectors[i];\r\n    if (groupLinks[groupConnector.g1] !== groupLinks[groupConnector.g2]) {\r\n      const min = Math.min(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      const max = Math.max(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      groupLinks[groupConnector.g1] = min;\r\n      groupLinks[groupConnector.g2] = min;\r\n      for (let i = 1; i <= groups; i++) {\r\n        if (groupLinks[i] === max) {\r\n          groupLinks[i] = min;\r\n        }\r\n      }\r\n\r\n      const { x, y, distance, horizontal } = groupConnector;\r\n\r\n      if (horizontal) {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y][x + o] = roomCount + 1;\r\n        }\r\n      } else {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y + o][x] = roomCount + 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  map.connected = true;\r\n\r\n  for (let i = 1; i <= groups; i++) {\r\n    if (groupLinks[i] !== 1) {\r\n      map.connected = false;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _range(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction _makeOdd(value) {\r\n  return Math.floor(value / 2) * 2 + 1;\r\n}\r\n\r\nfunction _pickRandom(data) {\r\n  return data[Math.floor(Math.random() * data.length)];\r\n}\r\n\r\nfunction _shuffle(data) {\r\n  const n = data.length;\r\n  for (let i = n - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const t = data[i];\r\n    data[i] = data[j];\r\n    data[j] = t;\r\n  }\r\n}\r\n\r\nfunction _sortRooms_LargestToSmallest(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    const priArea = pri.width * pri.height;\r\n    const secArea = sec.width * sec.height;\r\n    if (priArea < secArea) {\r\n      return 1;\r\n    } else if (priArea > secArea) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRooms_GroupAndId(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.group < sec.group) {\r\n      return -1;\r\n    } else if (pri.group > sec.group) {\r\n      return 1;\r\n    }\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRooms_Id(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRoomConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.r1 < sec.r1) { return -1; }\r\n    else if (pri.r1 > sec.r1) { return 1; }\r\n    if (pri.r2 < sec.r2) { return -1; }\r\n    else if (pri.r2 > sec.r2) { return 1; }\r\n    if (pri.x < sec.x) { return -1; }\r\n    else if (pri.x > sec.x) { return 1; }\r\n    if (pri.y < sec.y) { return -1; }\r\n    else if (pri.y > sec.y) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortGroupConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.distance < sec.distance) { return -1; }\r\n    else if (pri.distance > sec.distance) { return 1; }\r\n    if (pri.alignment < sec.alignment) { return -1; }\r\n    else if (pri.alignment > sec.alignment) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _doRoomsOverlap(pri, sec, bx, by) {\r\n  if (pri.x >= sec.x + sec.width + bx || sec.x >= pri.x + pri.width + bx) {\r\n    return false;\r\n  }\r\n  if (pri.y >= sec.y + sec.height + by || sec.y >= pri.y + pri.height + by) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction _getAlignmentAndDistance(room1, room2) {\r\n  if (room1.y > room2.y + room2.height || room2.y > room1.y + room1.height) {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      return null;\r\n    } else {\r\n      let y;\r\n      let distance;\r\n      if (room1.y > room2.y + room2.height) {\r\n        y = room2.y + room2.height\r\n        distance = room1.y - y;\r\n      } else {\r\n        y = room1.y + room1.height;\r\n        distance = room2.y - y;\r\n      }\r\n      const max = Math.min(room1.x + room1.width, room2.x + room2.width);\r\n      const min = Math.max(room1.x, room2.x)\r\n      const x = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: false };\r\n    }\r\n  } else {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      let x\r\n      let distance;\r\n      if (room1.x > room2.x + room2.width) {\r\n        x = room2.x + room2.width;\r\n        distance = room1.x - x;\r\n      } else {\r\n        x = room1.x + room1.width;\r\n        distance = room2.x - x;\r\n      }\r\n      const max = Math.min(room1.y + room1.height, room2.y + room2.height);\r\n      const min = Math.max(room1.y, room2.y)\r\n      const y = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { generateDungeon, getPlayerStartingLocation } from '../lib/map';\r\n\r\n// Take Home Projects - Build a Roguelike Dungeon Crawler Game\r\n// Objective: Build a CodePen.io app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/apLXEJ/.\r\n// Fulfill the below user stories. Use whichever libraries or APIs you need. Give it your own personal style.\r\n// User Story: I have health, a level, and a weapon. I can pick up a better weapon. I can pick up health items.\r\n// User Story: All the items and enemies on the map are arranged at random.\r\n// User Story: I can move throughout a map, discovering items.\r\n// User Story: I can move anywhere within the map's boundaries, but I can't move through an enemy until I've beaten it.\r\n// User Story: Much of the map is hidden. When I take a step, all spaces that are within a certain number of spaces from me are revealed.\r\n// User Story: When I beat an enemy, the enemy goes away and I get XP, which eventually increases my level.\r\n// User Story: When I fight an enemy, we take turns damaging each other until one of us loses. I do damage based off of my level and my weapon. The enemy does damage based off of its level. Damage is somewhat random within a range.\r\n// User Story: When I find and beat the boss, I win.\r\n// User Story: The game should be challenging, but theoretically winnable.\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\r\n    this.onClick = this.onClick.bind(this);\r\n    this.keys = {};\r\n    this.state = {\r\n      showOverlay: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._resizeViewport();\r\n    this._updateMap();\r\n    window.addEventListener('resize', this.onResize);\r\n    window.addEventListener('keydown', this.onKeyDown);\r\n    window.addEventListener('keyup', this.onKeyUp);\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.onResize);\r\n    window.removeEventListener('keydown', this.onKeyDown);\r\n    window.removeEventListener('keyup', this.onKeyUp);\r\n    window.cancelAnimationFrame(this.frame);\r\n  }\r\n\r\n  onResize() {\r\n    this._resizeViewport();\r\n  }\r\n\r\n  onKeyDown(event) {\r\n    event.preventDefault();\r\n    if (!this.keys[event.key]) {\r\n      this.onKeyPress(event.key);\r\n      this.keys[event.key] = true;\r\n      if (this.captureKeys) {\r\n        this.state.scene.keyboardState(this.keys);\r\n      }\r\n    }\r\n  }\r\n\r\n  onKeyUp(event) {\r\n    event.preventDefault();\r\n    this.keys[event.key] = false;\r\n    if (this.captureKeys) {\r\n      this.state.scene.keyboardState(this.keys);\r\n    }\r\n  }\r\n\r\n  onKeyPress(key) {\r\n    const { map, player } = this.state;\r\n    if (key === 'Escape') {\r\n      this.setState({\r\n        showOverlay: !this.state.showOverlay\r\n      });\r\n    }\r\n    let dx = 0;\r\n    let dy = 0;\r\n    if (key === 'ArrowUp') {\r\n      dy = -1;\r\n    } else if (key === 'ArrowDown') {\r\n      dy = 1;\r\n    } else if (key === 'ArrowLeft') {\r\n      dx = -1;\r\n    } else if (key === 'ArrowRight') {\r\n      dx = 1;\r\n    }\r\n    if (dx !== 0 || dy !== 0) {\r\n      if (map.data[player.y + dy][player.x + dx] !== 0) {\r\n        this.setState({\r\n          player: {\r\n            x: player.x + dx,\r\n            y: player.y + dy\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  onAnimationFrame() {\r\n    this._drawMap();\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  onClick() {\r\n    this._updateMap();\r\n  }\r\n\r\n  _resizeViewport() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n  }\r\n\r\n  _updateMap() {\r\n    let map = generateDungeon({ width: 107, height: 55, goal: 0.25, zones: 20, minSize: 3, maxSize: 7 });\r\n    const player = getPlayerStartingLocation(map);\r\n    this.setState({\r\n      map,\r\n      player\r\n    });\r\n  }\r\n\r\n  _drawMap() {\r\n    if (!this.state || !this.state.map) {\r\n      return;\r\n    }\r\n    const { width, height, data, rooms } = this.state.map;\r\n    const player = this.state.player;\r\n    const ctx = this.canvas.getContext('2d');\r\n    ctx.fillStyle = '#000000';\r\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    const cellWidth = Math.floor(this.canvas.width / width);\r\n    const cellHeight = Math.floor(this.canvas.height / height);\r\n    const xOffset = Math.floor((this.canvas.width - width * cellWidth) / 2);\r\n    const yOffset = Math.floor((this.canvas.height - height * cellHeight) / 2);\r\n    const colors = ['#7F0000', '#007F00', '#00007F', '#7F7F00', '#7F007F', '#007F7F', '#7F3F3F', '#3F7F3F', '#3F3F7F', '#7F7F3F', '#7F3F7F', '#3F7F7F'];\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        if (data[y][x] !== 0) {\r\n          if (data[y][x] <= rooms.length) {\r\n            const room = rooms[data[y][x] - 1];\r\n            if (room.group) {\r\n              ctx.fillStyle = colors[(room.group - 1) % colors.length];\r\n            } else {\r\n              ctx.fillStyle = '#3F3F3F';\r\n            }\r\n          } else {\r\n            ctx.fillStyle = '#3F3F3F';\r\n          }\r\n          ctx.fillRect(xOffset + x * cellWidth + 1, yOffset + y * cellHeight + 1, cellWidth - 2, cellHeight - 2);\r\n          ctx.fillStyle = '#FFFFFF';\r\n          ctx.font = '8px monospace';\r\n          ctx.textAlign = 'center';\r\n          ctx.textBaseline = 'middle';\r\n          ctx.fillText(data[y][x].toString(), xOffset + x * cellWidth + cellWidth / 2, yOffset + y * cellHeight + cellHeight / 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    const boss = {\r\n      x: Math.floor(rooms[0].x + rooms[0].width / 2),\r\n      y: Math.floor(rooms[0].y + rooms[0].height / 2)\r\n    };\r\n\r\n    ctx.fillStyle = '#FFFFFF';\r\n    ctx.font = '50px monospace';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText('O', xOffset + boss.x * cellWidth + cellWidth / 2, yOffset + boss.y * cellHeight + cellHeight / 2);\r\n\r\n    ctx.fillStyle = '#FFFFFF';\r\n    ctx.font = '50px monospace';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText('X', xOffset + player.x * cellWidth + cellWidth / 2, yOffset + player.y * cellHeight + cellHeight / 2);\r\n  }\r\n\r\n  render() {\r\n    let zones = null;\r\n    if (this.state && this.state.map && this.state.map.zones) {\r\n      zones = this.state.map.zones.map((zone, key) => (<div key={key}>{JSON.stringify(zone, null, 2)}</div>))\r\n    }\r\n    let rooms = null;\r\n    if (this.state && this.state.map && this.state.map.rooms) {\r\n      rooms = this.state.map.rooms.map((room, key) => (<div key={key}>{JSON.stringify(room, null, 2)}</div>))\r\n    }\r\n    return (\r\n      <div id=\"screen\">\r\n        <canvas id=\"canvas\" ref={elem => this.canvas = elem} onClick={this.onClick}></canvas>\r\n        <div id=\"overlay\" hidden={!this.state.showOverlay}>{zones}{rooms}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}