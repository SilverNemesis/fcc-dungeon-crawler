{"version":3,"sources":["components/Controls.js","lib/map.js","lib/draw.js","components/App.js","serviceWorker.js","index.js"],"names":["DescriptionControl","props","control","className","description","SelectControl","options","i","length","push","key","value","htmlFor","name","id","onChange","event","target","BoolControl","type","checked","IntControl","min","max","Number","FloatControl","toFixed","Math","floor","FunctionControl","onClick","function","Controls","controls","show","title","onClickPrevious","onClickNext","map","option","index","_directions","x","y","generateDungeon","width","height","zones","bossRoom","data","Array","fill","goal","minSize","maxSize","roomSize","power","s","count","pow","c","rooms","areaGoal","area","size","_pickRandom","room","random","_generateRooms","sort","pri","sec","priArea","secArea","maxRooms","loc","j","t","_shuffle","xStep","yStep","zone","_generateZones","placedRooms","roomCount","hasOwnProperty","minX","maxX","minY","maxY","isPlaced","_range","overlap","_doRoomsOverlap","_placeRoomsByZone","undefined","placed","filter","_placeRooms","h","w","_addRoomsToMap","links","_generateLinks","roomConnectors","r1","r2","_generateRoomConnectors","connectors","cur","nxt","connectorId","conCount","apl","group","connected","_isMapConnected","_connectNearbyRooms","_sortRooms_GroupAndId","groupCount","_renumberGroups","groupConnectors","roomInfoList","alignmentAndDistance","_getAlignmentAndDistance","alignment","distance","horizontal","g1","g2","room1","room2","prop","_generateGroupConnectors","groupLinks","groupConnector","o","_connectDistantRooms","_sortRooms_Id","borderX","borderY","resizeViewport","canvas","rect","getBoundingClientRect","App","onResize","bind","onKeyDown","onKeyUp","onAnimationFrame","updateMap","keys","mapOptions","state","showControls","mode","modes","this","window","addEventListener","frame","requestAnimationFrame","removeEventListener","cancelAnimationFrame","preventDefault","onKeyPress","captureKeys","scene","keyboardState","player","setState","dx","dy","ctx","getContext","fillStyle","fillRect","cellWidth","cellHeight","xOffset","yOffset","colors","font","textAlign","textBaseline","fillText","toString","boss","drawMap","setOption","Object","assign","visited","q","top","shift","dir","playerRoom","getPlayerStartingLocation","ref","elem","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.11452aa1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DescriptionControl = (props) => {\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      {control.description}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SelectControl = (props) => {\r\n  function onChange(event) {\r\n    props.onChange(control, event.target.value);\r\n  }\r\n  const { control } = props;\r\n  const options = [];\r\n  for (let i = 0; i < control.options.length; i++) {\r\n    options.push(\r\n      (<option key={i} value={i}>{control.options[i]}</option>)\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"control\">\r\n      <label htmlFor={control.name}>{control.name}</label>\r\n      <select id={control.name} className=\"select-css\" value={control.value} onChange={onChange}>\r\n        {options}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst BoolControl = (props) => {\r\n  function onChange(event) {\r\n    props.onChange(control, event.target.checked);\r\n  }\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      <label className=\"clickable\" htmlFor={control.name}><input className=\"clickable\" id={control.name} type=\"checkbox\" checked={control.value} onChange={onChange} />{control.name}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst IntControl = (props) => {\r\n  function onChange(event) {\r\n    props.onChange(control, Number(event.target.value));\r\n  }\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      <label htmlFor={control.name}>{control.name} {control.value}</label>\r\n      <input id={control.name} className=\"clickable\" type=\"range\" min={control.min} max={control.max} value={control.value} onChange={onChange} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst FloatControl = (props) => {\r\n  const factor = 1000;\r\n  function onChange(event) {\r\n    props.onChange(control, Number(event.target.value) / factor);\r\n  }\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      <label htmlFor={control.name}>{control.name} {control.value.toFixed(3)}</label>\r\n      <input id={control.name} className=\"clickable\" type=\"range\" min={Math.floor(control.min * factor)} max={Math.floor(control.max * factor)} value={Math.floor(control.value * factor)} onChange={onChange} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst FunctionControl = (props) => {\r\n  function onClick(event) {\r\n    control.function();\r\n  }\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      <button onClick={onClick}>{control.name}</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Controls = ({ show, title, onClickPrevious, onClickNext, onChange, options }) => {\r\n  if (!show) {\r\n    return null;\r\n  }\r\n  let controls\r\n  if (options) {\r\n    controls = options.map((option, index) => {\r\n      switch (option.type) {\r\n        case 'description':\r\n          return <DescriptionControl key={index} control={option} />\r\n        case 'select':\r\n          return <SelectControl key={index} control={option} onChange={onChange} />\r\n        case 'bool':\r\n          return <BoolControl key={index} control={option} onChange={onChange} />\r\n        case 'int':\r\n          return <IntControl key={index} control={option} onChange={onChange} />\r\n        case 'float':\r\n          return <FloatControl key={index} control={option} onChange={onChange} />\r\n        case 'function':\r\n          return <FunctionControl key={index} control={option} />\r\n        default:\r\n          return (\r\n            <div key={index} className=\"control\">{option.type} is not supported</div>\r\n          );\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <div id=\"controls\">\r\n      <div className=\"none\">\r\n        <span className=\"left\" onClick={onClickPrevious}>❮ PREV</span>\r\n        <span className=\"right\" onClick={onClickNext}>NEXT ❯</span>\r\n        <div className=\"center title\">{title}</div>\r\n      </div>\r\n      <div>\r\n        {controls}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","/** \r\n * @fileOverview Map creation logic\r\n */\r\n\r\n/** @constant {number} _directions - list of the cardinal directions */\r\nconst _directions = [\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 },\r\n  { x: -1, y: 0 }\r\n];\r\n\r\n/**\r\n * Options type definition\r\n * @typedef {Object} Options\r\n * @property {number} width - width of the dungeon\r\n * @property {number} height - height of the dungeon\r\n * @property {number} zones - number of zones in the dungeon\r\n * @property {boolean} bossRoom - whether ot not to use \"boss room\" logic\r\n * @property {number} goal - the fraction of the map to contain rooms\r\n * @property {number} maxRooms - the maximum number of rooms in the dungeon\r\n * @property {number} minSize - minimum room width and height\r\n * @property {number} maxSize - maximum base room width and height (excluding rectangle add on)\r\n */\r\n\r\n/**\r\n * Map type definition\r\n * @typedef {Object} Map\r\n * @property {number} width - width of the dungeon\r\n * @property {number} height - height of the dungeon\r\n * @property {number[][]} data - the map of the dungeon\r\n * @property {Room[]} rooms - the rooms in the dungeon\r\n * @property {Zone[]} zones - the zones in the dungeon\r\n * @property {boolean} connected - whether or not all the rooms are connected\r\n */\r\n\r\n/**\r\n * Room type definition\r\n * @typedef {Object} Room\r\n * @property {number} width - width of the room\r\n * @property {number} height - height of the room\r\n * @property {number} x - x coordinate of upper corner of room\r\n * @property {number} y - y coordinate of upper corner of room\r\n * @property {number} id - the room id\r\n * @property {number} group - the group that contains the room\r\n */\r\n\r\n/**\r\n * Map type definition\r\n * @typedef {Object} Zone\r\n * @property {number} width - width of the zone\r\n * @property {number} height - height of the zone\r\n * @property {number} x - x coordinate of upper corner of zone\r\n * @property {number} y - y coordinate of upper corner of zone\r\n */\r\n\r\n/**\r\n * Generates a dungeon\r\n * @param {Options} options\r\n * @returns {Map}\r\n */\r\nexport function generateDungeon(options) {\r\n  const { width, height, zones, bossRoom } = options;\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(0));\r\n  }\r\n\r\n  const map = {\r\n    width,\r\n    height,\r\n    data\r\n  }\r\n\r\n  _generateRooms(map, options);\r\n\r\n  _sortRooms_LargestToSmallest(map.rooms);\r\n\r\n  let { maxRooms } = options;\r\n\r\n  if (zones && zones > 1) {\r\n    _generateZones(map, zones);\r\n    if (bossRoom) {\r\n      const room = map.rooms[0];\r\n      const zone = map.zones[0];\r\n      if (room.width <= zone.width && room.height <= zone.height) {\r\n        room.x = Math.floor(zone.x);\r\n        room.y = Math.floor(zone.y + (zone.height - room.height) / 2);\r\n      }\r\n    }\r\n    const placedRooms = _placeRoomsByZone(map, maxRooms);\r\n    if (maxRooms !== undefined) {\r\n      maxRooms -= placedRooms;\r\n    }\r\n  } else {\r\n    if (bossRoom) {\r\n      const room = map.rooms[0];\r\n      if (room.width <= width - 2 && room.height <= height - 2) {\r\n        room.x = Math.floor((width - room.width) / 2);\r\n        room.y = Math.floor((height - room.height) / 2);\r\n      }\r\n    }\r\n  }\r\n\r\n  _placeRooms(map, maxRooms);\r\n\r\n  _addRoomsToMap(map);\r\n\r\n  _connectNearbyRooms(map);\r\n\r\n  _connectDistantRooms(map);\r\n\r\n  _sortRooms_Id(map.rooms);\r\n\r\n  return map;\r\n}\r\n\r\n/**\r\n * Gets a starting location for the player as far from the first room as possible\r\n * @param {Map} map\r\n */\r\nexport function getPlayerStartingLocation(map) {\r\n  const { width, height, data } = map;\r\n  const visited = [];\r\n  for (let i = 0; i < height; i++) {\r\n    visited.push(new Array(width).fill(0));\r\n  }\r\n  if (map.rooms.length === 0) {\r\n    return { x: 1, y: 1 };\r\n  }\r\n  const bossRoom = map.rooms[0];\r\n  let x = Math.floor(bossRoom.x + bossRoom.width / 2);\r\n  let y = Math.floor(bossRoom.y + bossRoom.height / 2);\r\n  let room = 1;\r\n  const q = [];\r\n  q.push({ x, y });\r\n  while (q.length > 0) {\r\n    const size = q.length;\r\n    for (let i = 0; i < size; i++) {\r\n      const top = q.shift();\r\n      room = data[top.y][top.x];\r\n      for (let j = 0; j < 4; j++) {\r\n        const dir = _directions[j];\r\n        if (top.x + dir.x < 0 || top.x + dir.x > width - 1 || top.y + dir.y < 0 || top.y + dir.y > height - 1) {\r\n          continue;\r\n        }\r\n        if (data[top.y + dir.y][top.x + dir.x] !== 0) {\r\n          if (visited[top.y + dir.y][top.x + dir.x] === 0) {\r\n            visited[top.y + dir.y][top.x + dir.x] = 1;\r\n            q.push({ x: top.x + dir.x, y: top.y + dir.y });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const playerRoom = map.rooms[room - 1];\r\n  x = Math.floor(playerRoom.x + playerRoom.width / 2);\r\n  y = Math.floor(playerRoom.y + playerRoom.height / 2);\r\n  return { x, y };\r\n}\r\n\r\n/**\r\n * Generates rooms that may go into the dungeon\r\n * @param {Map} map\r\n * @param {Options} options\r\n */\r\nfunction _generateRooms(map, options) {\r\n  const { width, height } = map;\r\n  let { goal, minSize, maxSize } = options;\r\n  if (!goal) {\r\n    goal = 0.5;\r\n  }\r\n  if (!minSize) {\r\n    minSize = 3;\r\n  }\r\n  if (!maxSize) {\r\n    maxSize = Math.max(Math.floor(Math.min(width / 4, height / 4)), minSize);\r\n  }\r\n  const roomSize = [];\r\n  let power = 0;\r\n  for (let s = maxSize; s >= minSize; s--) {\r\n    const count = Math.pow(2, power++);\r\n    for (let c = 0; c < count; c++) {\r\n      roomSize.push(s);\r\n    }\r\n  }\r\n\r\n  let rooms = [];\r\n  const areaGoal = width * height * goal;\r\n  let area = 0;\r\n  while (area < areaGoal) {\r\n    const size = _pickRandom(roomSize);\r\n    const room = { width: size, height: size };\r\n    if (Math.random() > 0.3) {\r\n      if (Math.random() < 0.5) {\r\n        room.width += 2;\r\n      } else {\r\n        room.height += 2;\r\n      }\r\n    }\r\n    rooms.push(room)\r\n    area += room.width * room.height;\r\n  }\r\n  map.rooms = rooms;\r\n}\r\n\r\n/**\r\n * Generates the zones within the dungeon\r\n * @param {Map} map\r\n * @param {number} count - the number of zones to generate\r\n */\r\nfunction _generateZones(map, count) {\r\n  const { width, height } = map;\r\n  const loc = [];\r\n  for (let i = 0; i < count; i++) {\r\n    loc[i] = i;\r\n  }\r\n\r\n  _shuffle(loc);\r\n\r\n  const xStep = Math.floor((width - 2) / count);\r\n  const yStep = Math.floor((height - 2) / count);\r\n\r\n  const zones = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const zone = { x: i * xStep + 1, y: loc[i] * yStep + 1, width: xStep, height: yStep };\r\n    zones.push(zone);\r\n  }\r\n\r\n  map.zones = zones;\r\n}\r\n\r\n/**\r\n * Places rooms across the zones of a dungeon\r\n * @param {Map} map\r\n * @param {number} maxRooms - the maximum number of rooms to place\r\n */\r\nfunction _placeRoomsByZone(map, maxRooms) {\r\n  const { width, height, rooms, zones } = map;\r\n\r\n  let placedRooms = 0;\r\n  let zone = 0;\r\n  const roomCount = rooms.length;\r\n  for (let i = 0; i < roomCount; i++) {\r\n    if (maxRooms && placedRooms === maxRooms) {\r\n      break;\r\n    }\r\n    const room = rooms[i];\r\n    if (room.hasOwnProperty('x') && room.hasOwnProperty('y')) {\r\n      continue;\r\n    }\r\n    const minX = zones[zone].x;\r\n    const maxX = Math.min(zones[zone].x + zones[zone].width, width - room.width - 1);\r\n    const minY = zones[zone].y;\r\n    const maxY = Math.min(zones[zone].y + zones[zone].height, height - room.height - 1);\r\n    if (minX + room.width > width - 1 || minY + room.height > height - 1) {\r\n      continue;\r\n    }\r\n    let isPlaced = false;\r\n    for (let t = 0; t < 100; t++) {\r\n      room.x = _range(minX, maxX);\r\n      room.y = _range(minY, maxY);\r\n      let overlap = false;\r\n      for (let j = 0; j < roomCount; j++) {\r\n        if (j === i || !rooms[j].hasOwnProperty('x') || !rooms[j].hasOwnProperty('y')) {\r\n          continue;\r\n        }\r\n        if (_doRoomsOverlap(room, rooms[j], 1, 1)) {\r\n          overlap = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!overlap) {\r\n        isPlaced = true;\r\n        break;\r\n      }\r\n    }\r\n    if (isPlaced) {\r\n      placedRooms++;\r\n      zone = (zone + 1) % zones.length;\r\n    } else {\r\n      delete room.x;\r\n      delete room.y;\r\n    }\r\n  }\r\n\r\n  return placedRooms;\r\n}\r\n\r\n/**\r\n * Places rooms anywhere in a dungeon\r\n * @param {Map} map\r\n * @param {number} maxRooms - the maximum number of rooms to place\r\n */\r\nfunction _placeRooms(map, maxRooms) {\r\n  const { width, height, rooms } = map;\r\n\r\n  let placedRooms = 0;\r\n  const roomCount = rooms.length;\r\n  for (let i = 0; i < roomCount; i++) {\r\n    if (maxRooms !== undefined && placedRooms === maxRooms) {\r\n      break;\r\n    }\r\n    const room = rooms[i];\r\n    if (room.hasOwnProperty('x') && room.hasOwnProperty('y')) {\r\n      continue;\r\n    }\r\n    let placed = false;\r\n    for (let t = 0; t < 1000; t++) {\r\n      room.x = _range(1, width - room.width - 1);\r\n      room.y = _range(1, height - room.height - 1);\r\n      let overlap = false;\r\n      for (let j = 0; j < roomCount; j++) {\r\n        if (j === i || !rooms[j].hasOwnProperty('x') || !rooms[j].hasOwnProperty('y')) {\r\n          continue;\r\n        }\r\n        if (_doRoomsOverlap(room, rooms[j], room.width >= 7 ? 3 : 1, room.height >= 7 ? 3 : 1)) {\r\n          overlap = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!overlap) {\r\n        placed = true;\r\n        break;\r\n      }\r\n    }\r\n    if (placed) {\r\n      placedRooms++;\r\n    } else {\r\n      delete room.x;\r\n      delete room.y;\r\n    }\r\n  }\r\n\r\n  map.rooms = map.rooms.filter((room) => room.x || room.y);\r\n\r\n  return map.rooms.length;\r\n}\r\n\r\n/**\r\n * Adds rooms to the map\r\n * @param {Map} map\r\n */\r\nfunction _addRoomsToMap(map) {\r\n  const { data, rooms } = map;\r\n\r\n  const roomCount = rooms.length;\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    room.id = i + 1;\r\n    for (let h = 0; h < room.height; h++) {\r\n      for (let w = 0; w < room.width; w++) {\r\n        data[room.y + h][room.x + w] = room.id;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Connects nearby rooms together\r\n * @param {Map} map\r\n */\r\nfunction _connectNearbyRooms(map) {\r\n  const { data, rooms } = map;\r\n\r\n  const links = _generateLinks(rooms.length);\r\n\r\n  const roomConnectors = _generateRoomConnectors(map);\r\n\r\n  _sortRoomConnectors(roomConnectors);\r\n\r\n  const roomCount = rooms.length;\r\n  const connectorId = roomCount + 1;\r\n  const conCount = roomConnectors.length;\r\n  let cur;\r\n  let nxt;\r\n  for (cur = 0; cur < conCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < conCount; nxt++) {\r\n      if (roomConnectors[nxt].r1 !== roomConnectors[cur].r1 || roomConnectors[nxt].r2 !== roomConnectors[cur].r2) {\r\n        break;\r\n      }\r\n    }\r\n    if (links[roomConnectors[cur].r1] !== links[roomConnectors[cur].r2]) {\r\n      const apl = roomConnectors[Math.floor(cur + (nxt - cur) / 2)];\r\n      const min = Math.min(links[apl.r1], links[apl.r2]);\r\n      const max = Math.max(links[apl.r1], links[apl.r2]);\r\n      links[apl.r1] = min;\r\n      links[apl.r2] = min;\r\n      for (let i = 1; i <= roomCount; i++) {\r\n        if (links[i] === max) {\r\n          links[i] = min;\r\n        }\r\n      }\r\n      data[apl.y][apl.x] = connectorId;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    room.group = links[room.id];\r\n  }\r\n\r\n  map.connected = _isMapConnected(links);\r\n}\r\n\r\n/**\r\n * Generates a list of connectors for nearby rooms\r\n * @param {Map} map\r\n * @returns {RoomConnector[]} room connectors\r\n */\r\nfunction _generateRoomConnectors(map) {\r\n  const { width, height, data } = map;\r\n\r\n  const roomConnectors = [];\r\n\r\n  for (let y = 1; y < height - 1; y++) {\r\n    for (let x = 1; x < width - 1; x++) {\r\n      if (data[y][x] === 0) {\r\n        if (data[y - 1][x] === 0 && data[y + 1][x] === 0 && data[y][x - 1] !== 0 && data[y][x + 1] !== 0) {\r\n          if (data[y][x - 1] < data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x - 1], r2: data[y][x + 1] });\r\n          } else if (data[y][x - 1] > data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x + 1], r2: data[y][x - 1] });\r\n          }\r\n        } else if (data[y][x - 1] === 0 && data[y][x + 1] === 0 && data[y - 1][x] !== 0 && data[y + 1][x] !== 0) {\r\n          if (data[y - 1][x] < data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y - 1][x], r2: data[y + 1][x] });\r\n          } else if (data[y - 1][x] > data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y + 1][x], r2: data[y - 1][x] });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return roomConnectors;\r\n}\r\n\r\n/**\r\n * Connects distant rooms together\r\n * @param {Map} map\r\n */\r\nfunction _connectDistantRooms(map) {\r\n  const { data, rooms } = map;\r\n\r\n  _sortRooms_GroupAndId(rooms);\r\n\r\n  const groupCount = _renumberGroups(rooms);\r\n\r\n  if (groupCount === 1) {\r\n    return;\r\n  }\r\n\r\n  const groupConnectors = _generateGroupConnectors(rooms);\r\n\r\n  _sortGroupConnectors(groupConnectors);\r\n\r\n  const groupLinks = _generateLinks(groupCount);\r\n\r\n  const connectorId = rooms.length + 1;\r\n\r\n  for (let i = 0; i < groupConnectors.length; i++) {\r\n    const groupConnector = groupConnectors[i];\r\n    if (groupLinks[groupConnector.g1] !== groupLinks[groupConnector.g2]) {\r\n      const min = Math.min(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      const max = Math.max(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      groupLinks[groupConnector.g1] = min;\r\n      groupLinks[groupConnector.g2] = min;\r\n      for (let i = 1; i <= groupCount; i++) {\r\n        if (groupLinks[i] === max) {\r\n          groupLinks[i] = min;\r\n        }\r\n      }\r\n\r\n      const { x, y, distance, horizontal } = groupConnector;\r\n\r\n      if (horizontal) {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y][x + o] = connectorId;\r\n        }\r\n      } else {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y + o][x] = connectorId;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  map.connected = _isMapConnected(groupLinks);\r\n}\r\n\r\n/**\r\n * Generates a list of links that link to themselves\r\n * @param {number} count\r\n * @returns {number[]} links\r\n */\r\nfunction _generateLinks(count) {\r\n  const links = [];\r\n  for (let i = 0; i <= count; i++) {\r\n    links.push(i);\r\n  }\r\n  return links;\r\n}\r\n\r\nfunction _isMapConnected(links) {\r\n  for (let i = 1; i < links.length; i++) {\r\n    if (links[i] !== 1) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Renumbers the groups contiguously statrting at 1\r\n * @param {Room[]} rooms\r\n * @returns {number} number of groups\r\n */\r\nfunction _renumberGroups(rooms) {\r\n  const roomCount = rooms.length;\r\n\r\n  let groupCount = 0;\r\n\r\n  let cur;\r\n  let nxt;\r\n  for (cur = 0; cur < roomCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < roomCount; nxt++) {\r\n      if (rooms[nxt].group !== rooms[cur].group) {\r\n        break;\r\n      }\r\n    }\r\n    groupCount++;\r\n    for (let apl = cur; apl < nxt; apl++) {\r\n      rooms[apl].group = groupCount;\r\n    }\r\n  }\r\n\r\n  return groupCount;\r\n}\r\n\r\n/**\r\n * Generates a list of connectors across different groups\r\n * @param {Room[]} rooms\r\n * @returns {GrouConnector[]} group connectors\r\n */\r\nfunction _generateGroupConnectors(rooms) {\r\n  const roomCount = rooms.length;\r\n\r\n  const roomInfoList = {};\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    for (let j = i + 1; j < roomCount; j++) {\r\n      if (rooms[i].group === rooms[j].group) {\r\n        continue;\r\n      }\r\n\r\n      const alignmentAndDistance = _getAlignmentAndDistance(rooms[i], rooms[j]);\r\n\r\n      if (!alignmentAndDistance) {\r\n        continue;\r\n      }\r\n\r\n      const { alignment, distance, x, y, horizontal } = alignmentAndDistance;\r\n\r\n      if (alignment === 0) {\r\n        continue;\r\n      }\r\n\r\n      const g1 = rooms[i].group;\r\n      const g2 = rooms[j].group;\r\n      const key = g1 + '_' + g2;\r\n\r\n      if (!roomInfoList[key]) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      } else if (roomInfoList[key].distance > distance || (roomInfoList[key].distance === distance && roomInfoList[key].alignment < alignmentAndDistance)) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      }\r\n    }\r\n  }\r\n\r\n  const groupConnectors = [];\r\n\r\n  for (let prop in roomInfoList) {\r\n    if (roomInfoList.hasOwnProperty(prop)) {\r\n      groupConnectors.push(roomInfoList[prop]);\r\n    }\r\n  }\r\n\r\n  return groupConnectors;\r\n}\r\n\r\n/**\r\n * Returns a random number within a range\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction _range(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Picks a random element from an array\r\n * @param {*[]} data\r\n */\r\nfunction _pickRandom(data) {\r\n  return data[Math.floor(Math.random() * data.length)];\r\n}\r\n\r\n/**\r\n * Shuffles the elements in an array\r\n * @param {*[]} data\r\n */\r\nfunction _shuffle(data) {\r\n  const n = data.length;\r\n  for (let i = n - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const t = data[i];\r\n    data[i] = data[j];\r\n    data[j] = t;\r\n  }\r\n}\r\n\r\n/**\r\n * Shuffles the elements in an array\r\n * @param {*[]} data\r\n */\r\nfunction _sortRooms_LargestToSmallest(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    const priArea = pri.width * pri.height;\r\n    const secArea = sec.width * sec.height;\r\n    if (priArea < secArea) {\r\n      return 1;\r\n    } else if (priArea > secArea) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\n/**\r\n * Sorts rooms by group and id\r\n * @param {Room[]} rooms\r\n */\r\nfunction _sortRooms_GroupAndId(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.group < sec.group) {\r\n      return -1;\r\n    } else if (pri.group > sec.group) {\r\n      return 1;\r\n    }\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\n/**\r\n * Sorts rooms by id\r\n * @param {Room[]} rooms\r\n */\r\nfunction _sortRooms_Id(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\n/**\r\n * Sorts room connectors by regions and location\r\n * @param {RoomConnector[]} connectors\r\n */\r\nfunction _sortRoomConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.r1 < sec.r1) { return -1; }\r\n    else if (pri.r1 > sec.r1) { return 1; }\r\n    if (pri.r2 < sec.r2) { return -1; }\r\n    else if (pri.r2 > sec.r2) { return 1; }\r\n    if (pri.x < sec.x) { return -1; }\r\n    else if (pri.x > sec.x) { return 1; }\r\n    if (pri.y < sec.y) { return -1; }\r\n    else if (pri.y > sec.y) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\n/**\r\n * Sorts group connectors by distance and alignment\r\n * @param {GroupConnector[]} connectors\r\n */\r\nfunction _sortGroupConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.distance < sec.distance) { return -1; }\r\n    else if (pri.distance > sec.distance) { return 1; }\r\n    if (pri.alignment < sec.alignment) { return -1; }\r\n    else if (pri.alignment > sec.alignment) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\n/**\r\n * Checks if rooms overlap (including a border)\r\n * @param {Room} room1\r\n * @param {Room} room2\r\n * @param {number} borderX - x border width\r\n * @param {number} borderY - y border width\r\n * @returns {boolean} whether or not the rooms overlap\r\n */\r\nfunction _doRoomsOverlap(room1, room2, borderX, borderY) {\r\n  if (room1.x >= room2.x + room2.width + borderX || room2.x >= room1.x + room1.width + borderX) {\r\n    return false;\r\n  }\r\n  if (room1.y >= room2.y + room2.height + borderY || room2.y >= room1.y + room1.height + borderY) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Gets the alignment and distance between rooms\r\n * @param {Room} room1\r\n * @param {Room} room2\r\n * @returns {AlignmentDistance} the alignment, distance, and whether or not the alignment is horizontal\r\n */\r\nfunction _getAlignmentAndDistance(room1, room2) {\r\n  if (room1.y > room2.y + room2.height || room2.y > room1.y + room1.height) {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      return null;\r\n    } else {\r\n      let y;\r\n      let distance;\r\n      if (room1.y > room2.y + room2.height) {\r\n        y = room2.y + room2.height\r\n        distance = room1.y - y;\r\n      } else {\r\n        y = room1.y + room1.height;\r\n        distance = room2.y - y;\r\n      }\r\n      const max = Math.min(room1.x + room1.width, room2.x + room2.width);\r\n      const min = Math.max(room1.x, room2.x)\r\n      const x = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: false };\r\n    }\r\n  } else {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      let x\r\n      let distance;\r\n      if (room1.x > room2.x + room2.width) {\r\n        x = room2.x + room2.width;\r\n        distance = room1.x - x;\r\n      } else {\r\n        x = room1.x + room1.width;\r\n        distance = room2.x - x;\r\n      }\r\n      const max = Math.min(room1.y + room1.height, room2.y + room2.height);\r\n      const min = Math.max(room1.y, room2.y)\r\n      const y = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","/** \r\n * @fileOverview Drawing logic\r\n */\r\n\r\n/**\r\n * Resizes the viewport to match the bouding rectangle\r\n * @param {HTMLCanvasElement} canvas\r\n */\r\nexport function resizeViewport(canvas) {\r\n  const rect = canvas.getBoundingClientRect()\r\n  canvas.width = rect.width;\r\n  canvas.height = rect.height;\r\n}\r\n\r\n/**\r\n * Draws the map and the player\r\n * @param {HTMLCanvasElement} canvas\r\n * @param {Map} map\r\n * @param {Player} player\r\n */\r\nexport function drawMap(canvas, map, player) {\r\n  const { width, height, data, rooms } = map;\r\n  const ctx = canvas.getContext('2d');\r\n  ctx.fillStyle = '#000000';\r\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  const cellWidth = Math.floor(canvas.width / width);\r\n  const cellHeight = Math.floor(canvas.height / height);\r\n  const xOffset = Math.floor((canvas.width - width * cellWidth) / 2);\r\n  const yOffset = Math.floor((canvas.height - height * cellHeight) / 2);\r\n  const colors = ['#7F0000', '#007F00', '#00007F', '#7F7F00', '#7F007F', '#007F7F', '#7F3F3F', '#3F7F3F', '#3F3F7F', '#7F7F3F', '#7F3F7F', '#3F7F7F'];\r\n  for (let y = 0; y < height; y++) {\r\n    for (let x = 0; x < width; x++) {\r\n      if (data[y][x] !== 0) {\r\n        if (data[y][x] <= rooms.length) {\r\n          const room = rooms[data[y][x] - 1];\r\n          if (room.group) {\r\n            ctx.fillStyle = colors[(room.group - 1) % colors.length];\r\n          } else {\r\n            ctx.fillStyle = '#3F3F3F';\r\n          }\r\n        } else {\r\n          ctx.fillStyle = '#3F3F3F';\r\n        }\r\n        ctx.fillRect(xOffset + x * cellWidth + 1, yOffset + y * cellHeight + 1, cellWidth - 2, cellHeight - 2);\r\n        ctx.fillStyle = '#FFFFFF';\r\n        ctx.font = '8px monospace';\r\n        ctx.textAlign = 'center';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillText(data[y][x].toString(), xOffset + x * cellWidth + cellWidth / 2, yOffset + y * cellHeight + cellHeight / 2);\r\n      }\r\n    }\r\n  }\r\n\r\n  const boss = {\r\n    x: Math.floor(rooms[0].x + rooms[0].width / 2),\r\n    y: Math.floor(rooms[0].y + rooms[0].height / 2)\r\n  };\r\n\r\n  ctx.fillStyle = '#FFFFFF';\r\n  ctx.font = '50px monospace';\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'middle';\r\n  ctx.fillText('O', xOffset + boss.x * cellWidth + cellWidth / 2, yOffset + boss.y * cellHeight + cellHeight / 2);\r\n\r\n  ctx.fillStyle = '#FFFFFF';\r\n  ctx.font = '50px monospace';\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'middle';\r\n  ctx.fillText('X', xOffset + player.x * cellWidth + cellWidth / 2, yOffset + player.y * cellHeight + cellHeight / 2);\r\n}\r\n","import React from 'react';\r\nimport Controls from './Controls';\r\nimport { generateDungeon, getPlayerStartingLocation } from '../lib/map';\r\nimport { resizeViewport, drawMap } from '../lib/draw';\r\n\r\n// Take Home Projects - Build a Roguelike Dungeon Crawler Game\r\n// Objective: Build a CodePen.io app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/apLXEJ/.\r\n// Fulfill the below user stories. Use whichever libraries or APIs you need. Give it your own personal style.\r\n// User Story: I have health, a level, and a weapon. I can pick up a better weapon. I can pick up health items.\r\n// User Story: All the items and enemies on the map are arranged at random.\r\n// User Story: I can move throughout a map, discovering items.\r\n// User Story: I can move anywhere within the map's boundaries, but I can't move through an enemy until I've beaten it.\r\n// User Story: Much of the map is hidden. When I take a step, all spaces that are within a certain number of spaces from me are revealed.\r\n// User Story: When I beat an enemy, the enemy goes away and I get XP, which eventually increases my level.\r\n// User Story: When I fight an enemy, we take turns damaging each other until one of us loses. I do damage based off of my level and my weapon. The enemy does damage based off of its level. Damage is somewhat random within a range.\r\n// User Story: When I find and beat the boss, I win.\r\n// User Story: The game should be challenging, but theoretically winnable.\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\r\n    this.onClickPrevious = this.onClickPrevious.bind(this);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.updateMap = this.updateMap.bind(this);\r\n    this.keys = {};\r\n    const mapOptions = {\r\n      width: 112,\r\n      height: 63,\r\n      goal: 0.25,\r\n      zones: 20,\r\n      minSize: 4,\r\n      maxSize: 10,\r\n      maxRooms: 0,\r\n      bossRoom: false\r\n    };\r\n    this.state = {\r\n      showControls: false,\r\n      mode: 0,\r\n      modes: ['Map Mode', 'Explore Mode'],\r\n      mapOptions,\r\n      options: [\r\n        [\r\n          {\r\n            name: 'Update Map',\r\n            type: 'function',\r\n            function: this.updateMap\r\n          },\r\n          {\r\n            name: 'Map Width',\r\n            type: 'int',\r\n            id: 'width',\r\n            min: 10,\r\n            max: 200,\r\n            value: mapOptions.width\r\n          },\r\n          {\r\n            name: 'Map Height',\r\n            type: 'int',\r\n            id: 'height',\r\n            min: 10,\r\n            max: 100,\r\n            value: mapOptions.height\r\n          },\r\n          {\r\n            name: 'Room Fraction',\r\n            type: 'float',\r\n            id: 'goal',\r\n            min: 0.0,\r\n            max: 1.0,\r\n            value: mapOptions.goal\r\n          },\r\n          {\r\n            name: 'Min Room Size',\r\n            type: 'int',\r\n            id: 'minSize',\r\n            min: 2,\r\n            max: 8,\r\n            value: mapOptions.minSize\r\n          },\r\n          {\r\n            name: 'Max Room Size',\r\n            type: 'int',\r\n            id: 'maxSize',\r\n            min: 8,\r\n            max: 14,\r\n            value: mapOptions.maxSize\r\n          },\r\n          {\r\n            name: 'Max Rooms',\r\n            type: 'int',\r\n            id: 'maxRooms',\r\n            min: 0,\r\n            max: 100,\r\n            value: mapOptions.maxRooms\r\n          },\r\n          {\r\n            name: 'Zones',\r\n            type: 'int',\r\n            id: 'zones',\r\n            min: 0,\r\n            max: 20,\r\n            value: mapOptions.zones\r\n          },\r\n          {\r\n            name: 'Boss Room',\r\n            type: 'bool',\r\n            id: 'bossRoom',\r\n            value: mapOptions.bossRoom\r\n          }\r\n        ],\r\n        []\r\n      ]\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    resizeViewport(this.canvas);\r\n    this.updateMap();\r\n    window.addEventListener('resize', this.onResize);\r\n    window.addEventListener('keydown', this.onKeyDown);\r\n    window.addEventListener('keyup', this.onKeyUp);\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.onResize);\r\n    window.removeEventListener('keydown', this.onKeyDown);\r\n    window.removeEventListener('keyup', this.onKeyUp);\r\n    window.cancelAnimationFrame(this.frame);\r\n  }\r\n\r\n  onResize() {\r\n    resizeViewport(this.canvas);\r\n  }\r\n\r\n  onKeyDown(event) {\r\n    event.preventDefault();\r\n    if (!this.keys[event.key]) {\r\n      this.onKeyPress(event.key);\r\n      this.keys[event.key] = true;\r\n      if (this.captureKeys) {\r\n        this.state.scene.keyboardState(this.keys);\r\n      }\r\n    }\r\n  }\r\n\r\n  onKeyUp(event) {\r\n    event.preventDefault();\r\n    this.keys[event.key] = false;\r\n    if (this.captureKeys) {\r\n      this.state.scene.keyboardState(this.keys);\r\n    }\r\n  }\r\n\r\n  onKeyPress(key) {\r\n    const { map, player } = this.state;\r\n    if (key === 'Escape') {\r\n      this.setState({\r\n        showControls: !this.state.showControls\r\n      });\r\n    }\r\n    let dx = 0;\r\n    let dy = 0;\r\n    if (key === 'ArrowUp') {\r\n      dy = -1;\r\n    } else if (key === 'ArrowDown') {\r\n      dy = 1;\r\n    } else if (key === 'ArrowLeft') {\r\n      dx = -1;\r\n    } else if (key === 'ArrowRight') {\r\n      dx = 1;\r\n    }\r\n    if (dx !== 0 || dy !== 0) {\r\n      if (map.data[player.y + dy][player.x + dx] !== 0) {\r\n        this.setState({\r\n          player: {\r\n            x: player.x + dx,\r\n            y: player.y + dy\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  onCloseMenu() {\r\n    this.setState({\r\n      showControls: false\r\n    });\r\n  }\r\n\r\n  onAnimationFrame() {\r\n    if (this.state && this.state.map) {\r\n      drawMap(this.canvas, this.state.map, this.state.player);\r\n    }\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  onClickNext() {\r\n    this.setState({ mode: (this.state.mode + 1) % this.state.modes.length });\r\n  }\r\n\r\n  onClickPrevious() {\r\n    this.setState({ mode: (this.state.mode + this.state.modes.length - 1) % this.state.modes.length });\r\n  }\r\n\r\n  onChange(option, value) {\r\n    if (value !== option.value) {\r\n      this.setOption(option, value);\r\n    }\r\n  }\r\n\r\n  setOption(option, value) {\r\n    option.value = value;\r\n    if (option.id) {\r\n      const mapOptions = Object.assign({}, this.state.mapOptions);\r\n      mapOptions[option.id] = value;\r\n      this.setState({ mapOptions });\r\n    }\r\n  }\r\n\r\n  updateMap() {\r\n    const map = generateDungeon(this.state.mapOptions);\r\n    const player = getPlayerStartingLocation(map);\r\n    this.setState({\r\n      map,\r\n      player\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"screen\">\r\n        <canvas id=\"canvas\" ref={elem => this.canvas = elem} onClick={this.onClick}></canvas>\r\n        <Controls show={this.state.showControls} title={this.state.modes[this.state.mode]} options={this.state.options[this.state.mode]} onClickPrevious={this.onClickPrevious} onClickNext={this.onClickNext} onChange={this.onChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}