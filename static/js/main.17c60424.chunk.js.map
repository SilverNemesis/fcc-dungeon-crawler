{"version":3,"sources":["lib/map.js","components/App.js","serviceWorker.js","index.js"],"names":["generateDungeon","width","height","_makeOdd","data","y","push","Array","fill","roomSize","power","s","Math","max","floor","min","count","pow","c","rooms","areaGoal","area","size","_pickRandom","room","random","_sortRooms","roomCount","length","i","placed","t","x","_range","overlap","j","_doRoomsOverlap","filter","h","w","links","connectors","r1","r2","_sortConnectors","conCount","cur","nxt","apl","multiple","getPlayerStartingLocation","map","value","sort","pri","sec","priArea","secArea","bx","by","App","props","onResize","bind","onKeyDown","onKeyUp","onAnimationFrame","onClick","player","state","keys","this","_resizeViewport","window","addEventListener","frame","requestAnimationFrame","removeEventListener","cancelAnimationFrame","event","preventDefault","key","onKeyPress","captureKeys","scene","keyboardState","dx","dy","setState","_drawMap","_updateMap","canvas","rect","getBoundingClientRect","ctx","getContext","fillStyle","fillRect","cellWidth","cellHeight","xOffset","yOffset","font","textAlign","textBaseline","fillText","toString","beginPath","arc","PI","id","ref","elem","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.17c60424.chunk.js","sourcesContent":["export function generateDungeon(width, height) {\r\n  width = _makeOdd(width);\r\n  height = _makeOdd(height);\r\n\r\n  while (true) {\r\n    const data = [];\r\n    for (let y = 0; y < height; y++) {\r\n      data.push(new Array(width).fill(0));\r\n    }\r\n\r\n    const maxRoomSize = _makeOdd(Math.max(Math.floor(Math.min(width / 4, height / 4)), 3));\r\n    const roomSize = [];\r\n    let power = 0;\r\n    for (let s = maxRoomSize; s >= 3; s -= 2) {\r\n      const count = Math.pow(2, power++);\r\n      for (let c = 0; c < count; c++) {\r\n        roomSize.push(s);\r\n      }\r\n    }\r\n\r\n    let rooms = [];\r\n    const areaGoal = width * height / 2;\r\n    let area = 0;\r\n    while (area < areaGoal) {\r\n      const size = _pickRandom(roomSize);\r\n      const room = { width: size, height: size };\r\n      if (Math.random() > 0.3) {\r\n        if (Math.random() < 0.5) {\r\n          room.width += 2;\r\n        } else {\r\n          room.height += 2;\r\n        }\r\n      }\r\n      rooms.push(room)\r\n      area += room.width * room.height;\r\n    }\r\n\r\n    _sortRooms(rooms);\r\n\r\n    let roomCount = rooms.length;\r\n    for (let i = 0; i < roomCount; i++) {\r\n      const room = rooms[i];\r\n      let placed = false;\r\n      for (let t = 0; t < 1000; t++) {\r\n        room.x = _makeOdd(_range(1, width - room.width - 1));\r\n        room.y = _makeOdd(_range(1, height - room.height - 1));\r\n        let overlap = false;\r\n        for (let j = 0; j < i; j++) {\r\n          if (_doRoomsOverlap(room, rooms[j], room.width >= 7 ? 3 : 1, room.height >= 7 ? 3 : 1)) {\r\n            overlap = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!overlap) {\r\n          placed = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!placed) {\r\n        delete room.x;\r\n        delete room.y;\r\n      }\r\n    }\r\n\r\n    rooms = rooms.filter((room) => room.x || room.y);\r\n    roomCount = rooms.length;\r\n\r\n    for (let i = 0; i < roomCount; i++) {\r\n      const room = rooms[i];\r\n      for (let h = 0; h < room.height; h++) {\r\n        for (let w = 0; w < room.width; w++) {\r\n          data[room.y + h][room.x + w] = i + 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    const links = [];\r\n    for (let i = 0; i <= roomCount; i++) {\r\n      links.push(i);\r\n    }\r\n\r\n    const connectors = [];\r\n\r\n    for (let y = 1; y < height - 1; y++) {\r\n      for (let x = 1; x < width - 1; x++) {\r\n        if (data[y][x] === 0) {\r\n          if (data[y - 1][x] === 0 && data[y + 1][x] === 0 && data[y][x - 1] !== 0 && data[y][x + 1] !== 0) {\r\n            if (data[y][x - 1] < data[y][x + 1]) {\r\n              connectors.push({ x, y, r1: data[y][x - 1], r2: data[y][x + 1] });\r\n            } else if (data[y][x - 1] > data[y][x + 1]) {\r\n              connectors.push({ x, y, r1: data[y][x + 1], r2: data[y][x - 1] });\r\n            }\r\n          } else if (data[y][x - 1] === 0 && data[y][x + 1] === 0 && data[y - 1][x] !== 0 && data[y + 1][x] !== 0) {\r\n            if (data[y - 1][x] < data[y + 1][x]) {\r\n              connectors.push({ x, y, r1: data[y - 1][x], r2: data[y + 1][x] });\r\n            } else if (data[y - 1][x] > data[y + 1][x]) {\r\n              connectors.push({ x, y, r1: data[y + 1][x], r2: data[y - 1][x] });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    _sortConnectors(connectors);\r\n\r\n    const conCount = connectors.length;\r\n    let cur;\r\n    let nxt;\r\n    for (cur = 0; cur < conCount; cur = nxt) {\r\n      for (nxt = cur + 1; nxt < conCount; nxt++) {\r\n        if (connectors[nxt].r1 !== connectors[cur].r1 || connectors[nxt].r2 !== connectors[cur].r2) {\r\n          break;\r\n        }\r\n      }\r\n      if (links[connectors[cur].r1] !== links[connectors[cur].r2]) {\r\n        const apl = connectors[Math.floor(cur + (nxt - cur) / 2)];\r\n        const min = Math.min(links[apl.r1], links[apl.r2]);\r\n        const max = Math.max(links[apl.r1], links[apl.r2]);\r\n        links[apl.r1] = min;\r\n        links[apl.r2] = min;\r\n        for (let i = 1; i <= roomCount; i++) {\r\n          if (links[i] === max) {\r\n            links[i] = min;\r\n          }\r\n        }\r\n        data[apl.y][apl.x] = roomCount + 1;\r\n      }\r\n    }\r\n\r\n    let multiple = false;\r\n\r\n    for (let i = 1; i <= roomCount; i++) {\r\n      if (links[i] !== 1) {\r\n        multiple = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (multiple) {\r\n      continue;\r\n    }\r\n\r\n    return {\r\n      width,\r\n      height,\r\n      data,\r\n      rooms\r\n    };\r\n  }\r\n}\r\n\r\nexport function getPlayerStartingLocation(map) {\r\n  for (let y = 0; y < map.height; y++) {\r\n    for (let x = 0; x < map.width; x++) {\r\n      if (map.data[y][x] !== 0) {\r\n        return { x, y };\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction _range(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction _makeOdd(value) {\r\n  return Math.floor(value / 2) * 2 + 1;\r\n}\r\n\r\nfunction _pickRandom(data) {\r\n  return data[Math.floor(Math.random() * data.length)];\r\n}\r\n\r\nfunction _sortRooms(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    const priArea = pri.width * pri.height;\r\n    const secArea = sec.width * sec.height;\r\n    if (priArea < secArea) {\r\n      return 1;\r\n    } else if (priArea > secArea) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.r1 < sec.r1) { return -1; }\r\n    else if (pri.r1 > sec.r1) { return 1; }\r\n    if (pri.r2 < sec.r2) { return -1; }\r\n    else if (pri.r2 > sec.r2) { return 1; }\r\n    if (pri.x < sec.x) { return -1; }\r\n    else if (pri.x > sec.x) { return 1; }\r\n    if (pri.y < sec.y) { return -1; }\r\n    else if (pri.y > sec.y) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _doRoomsOverlap(pri, sec, bx, by) {\r\n  if (pri.x >= sec.x + sec.width + bx || sec.x >= pri.x + pri.width + bx) {\r\n    return false;\r\n  }\r\n  if (pri.y >= sec.y + sec.height + by || sec.y >= pri.y + pri.height + by) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","import React from 'react';\r\nimport { generateDungeon, getPlayerStartingLocation } from '../lib/map';\r\n\r\n// Take Home Projects - Build a Roguelike Dungeon Crawler Game\r\n// Objective: Build a CodePen.io app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/apLXEJ/.\r\n// Fulfill the below user stories. Use whichever libraries or APIs you need. Give it your own personal style.\r\n// User Story: I have health, a level, and a weapon. I can pick up a better weapon. I can pick up health items.\r\n// User Story: All the items and enemies on the map are arranged at random.\r\n// User Story: I can move throughout a map, discovering items.\r\n// User Story: I can move anywhere within the map's boundaries, but I can't move through an enemy until I've beaten it.\r\n// User Story: Much of the map is hidden. When I take a step, all spaces that are within a certain number of spaces from me are revealed.\r\n// User Story: When I beat an enemy, the enemy goes away and I get XP, which eventually increases my level.\r\n// User Story: When I fight an enemy, we take turns damaging each other until one of us loses. I do damage based off of my level and my weapon. The enemy does damage based off of its level. Damage is somewhat random within a range.\r\n// User Story: When I find and beat the boss, I win.\r\n// User Story: The game should be challenging, but theoretically winnable.\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\r\n    this.onClick = this.onClick.bind(this);\r\n    const map = generateDungeon(101, 53);\r\n    const player = getPlayerStartingLocation(map);\r\n    this.state = {\r\n      map,\r\n      player\r\n    };\r\n    this.keys = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._resizeViewport();\r\n    window.addEventListener('resize', this.onResize);\r\n    window.addEventListener('keydown', this.onKeyDown);\r\n    window.addEventListener('keyup', this.onKeyUp);\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.onResize);\r\n    window.removeEventListener('keydown', this.onKeyDown);\r\n    window.removeEventListener('keyup', this.onKeyUp);\r\n    window.cancelAnimationFrame(this.frame);\r\n  }\r\n\r\n  onResize() {\r\n    this._resizeViewport();\r\n  }\r\n\r\n  onKeyDown(event) {\r\n    event.preventDefault();\r\n    if (!this.keys[event.key]) {\r\n      this.onKeyPress(event.key);\r\n      this.keys[event.key] = true;\r\n      if (this.captureKeys) {\r\n        this.state.scene.keyboardState(this.keys);\r\n      }\r\n    }\r\n  }\r\n\r\n  onKeyUp(event) {\r\n    event.preventDefault();\r\n    this.keys[event.key] = false;\r\n    if (this.captureKeys) {\r\n      this.state.scene.keyboardState(this.keys);\r\n    }\r\n  }\r\n\r\n  onKeyPress(key) {\r\n    const { map, player } = this.state;\r\n    let dx = 0;\r\n    let dy = 0;\r\n    if (key === 'ArrowUp') {\r\n      dy = -1;\r\n    } else if (key === 'ArrowDown') {\r\n      dy = 1;\r\n    } else if (key === 'ArrowLeft') {\r\n      dx = -1;\r\n    } else if (key === 'ArrowRight') {\r\n      dx = 1;\r\n    }\r\n    if (dx !== 0 || dy !== 0) {\r\n      if (map.data[player.y + dy][player.x + dx] !== 0) {\r\n        this.setState({\r\n          player: {\r\n            x: player.x + dx,\r\n            y: player.y + dy\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  onAnimationFrame() {\r\n    this._drawMap();\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  onClick() {\r\n    this._updateMap();\r\n  }\r\n\r\n  _resizeViewport() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n  }\r\n\r\n  _updateMap() {\r\n    const map = generateDungeon(101, 53);\r\n    const player = getPlayerStartingLocation(map);\r\n    this.setState({\r\n      map,\r\n      player\r\n    });\r\n  }\r\n\r\n  _drawMap() {\r\n    const { width, height, data } = this.state.map;\r\n    const player = this.state.player;\r\n    const ctx = this.canvas.getContext('2d');\r\n    ctx.fillStyle = '#FFFFFF';\r\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    const cellWidth = Math.floor(this.canvas.width / width);\r\n    const cellHeight = Math.floor(this.canvas.height / height);\r\n    const xOffset = Math.floor((this.canvas.width - width * cellWidth) / 2);\r\n    const yOffset = Math.floor((this.canvas.height - height * cellHeight) / 2);\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        if (data[y][x] !== 0) {\r\n          ctx.fillStyle = '#000000';\r\n          ctx.fillRect(xOffset + x * cellWidth + 1, yOffset + y * cellHeight + 1, cellWidth - 2, cellHeight - 2);\r\n          ctx.fillStyle = '#FFFFFF';\r\n          ctx.font = '8px monospace';\r\n          ctx.textAlign = 'center';\r\n          ctx.textBaseline = 'middle';\r\n          ctx.fillText(data[y][x].toString(), xOffset + x * cellWidth + cellWidth / 2, yOffset + y * cellHeight + cellHeight / 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    ctx.fillStyle = '#7F7FFF';\r\n    ctx.beginPath();\r\n    ctx.arc(xOffset + player.x * cellWidth + cellWidth / 2, yOffset + player.y * cellHeight + cellHeight / 2, Math.min(cellWidth / 4, cellHeight / 4) - 1, 0, Math.PI * 2);\r\n    ctx.fill();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"screen\">\r\n        <canvas id=\"canvas\" ref={elem => this.canvas = elem} onClick={this.onClick}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}