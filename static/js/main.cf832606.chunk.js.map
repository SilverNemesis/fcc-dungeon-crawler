{"version":3,"sources":["lib/map.js","components/App.js","serviceWorker.js","index.js"],"names":["_directions","x","y","generateDungeon","width","height","_makeOdd","data","push","Array","fill","roomSize","power","s","Math","max","floor","min","count","pow","c","rooms","areaGoal","area","size","_pickRandom","room","random","sort","pri","sec","priArea","secArea","_sortRooms_LargestToSmallest","roomCount","length","i","placed","t","_range","overlap","j","_doRoomsOverlap","filter","h","w","links","roomConnectors","r1","r2","cur","nxt","conCount","apl","id","group","_sortRooms_GroupAndId","groups","roomInfoList","alignmentAndDistance","_getAlignmentAndDistance","alignment","distance","horizontal","g1","g2","key","room1","room2","groupConnectors","prop","hasOwnProperty","connectors","_sortGroupConnectors","groupLinks","groupConnector","o","connected","_sortRooms_Id","value","bx","by","App","props","onResize","bind","onKeyDown","onKeyUp","onAnimationFrame","onClick","keys","this","_resizeViewport","_updateMap","window","addEventListener","frame","requestAnimationFrame","removeEventListener","cancelAnimationFrame","event","preventDefault","onKeyPress","captureKeys","state","scene","keyboardState","map","player","dx","dy","setState","_drawMap","canvas","rect","getBoundingClientRect","visited","bossRoom","q","top","shift","dir","playerRoom","getPlayerStartingLocation","ctx","getContext","fillStyle","fillRect","cellWidth","cellHeight","xOffset","yOffset","colors","font","textAlign","textBaseline","fillText","toString","beginPath","arc","PI","ref","elem","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf832606.chunk.js","sourcesContent":["const _directions = [\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 },\r\n  { x: -1, y: 0 }\r\n];\r\n\r\nexport function generateDungeon(width, height) {\r\n  width = _makeOdd(width);\r\n  height = _makeOdd(height);\r\n\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(0));\r\n  }\r\n\r\n  const maxRoomSize = _makeOdd(Math.max(Math.floor(Math.min(width / 4, height / 4)), 3));\r\n  const roomSize = [];\r\n  let power = 0;\r\n  for (let s = maxRoomSize; s >= 3; s -= 2) {\r\n    const count = Math.pow(2, power++);\r\n    for (let c = 0; c < count; c++) {\r\n      roomSize.push(s);\r\n    }\r\n  }\r\n\r\n  let rooms = [];\r\n  const areaGoal = width * height / 2;\r\n  let area = 0;\r\n  while (area < areaGoal) {\r\n    const size = _pickRandom(roomSize);\r\n    const room = { width: size, height: size };\r\n    if (Math.random() > 0.3) {\r\n      if (Math.random() < 0.5) {\r\n        room.width += 2;\r\n      } else {\r\n        room.height += 2;\r\n      }\r\n    }\r\n    rooms.push(room)\r\n    area += room.width * room.height;\r\n  }\r\n\r\n  _sortRooms_LargestToSmallest(rooms);\r\n\r\n  let roomCount = rooms.length;\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    let placed = false;\r\n    for (let t = 0; t < 1000; t++) {\r\n      room.x = _makeOdd(_range(1, width - room.width - 1));\r\n      room.y = _makeOdd(_range(1, height - room.height - 1));\r\n      let overlap = false;\r\n      for (let j = 0; j < i; j++) {\r\n        if (_doRoomsOverlap(room, rooms[j], room.width >= 7 ? 3 : 1, room.height >= 7 ? 3 : 1)) {\r\n          overlap = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!overlap) {\r\n        placed = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!placed) {\r\n      delete room.x;\r\n      delete room.y;\r\n    }\r\n  }\r\n\r\n  rooms = rooms.filter((room) => room.x || room.y);\r\n  roomCount = rooms.length;\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    for (let h = 0; h < room.height; h++) {\r\n      for (let w = 0; w < room.width; w++) {\r\n        data[room.y + h][room.x + w] = i + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  const links = [];\r\n  for (let i = 0; i <= roomCount; i++) {\r\n    links.push(i);\r\n  }\r\n\r\n  const roomConnectors = [];\r\n\r\n  for (let y = 1; y < height - 1; y++) {\r\n    for (let x = 1; x < width - 1; x++) {\r\n      if (data[y][x] === 0) {\r\n        if (data[y - 1][x] === 0 && data[y + 1][x] === 0 && data[y][x - 1] !== 0 && data[y][x + 1] !== 0) {\r\n          if (data[y][x - 1] < data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x - 1], r2: data[y][x + 1] });\r\n          } else if (data[y][x - 1] > data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x + 1], r2: data[y][x - 1] });\r\n          }\r\n        } else if (data[y][x - 1] === 0 && data[y][x + 1] === 0 && data[y - 1][x] !== 0 && data[y + 1][x] !== 0) {\r\n          if (data[y - 1][x] < data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y - 1][x], r2: data[y + 1][x] });\r\n          } else if (data[y - 1][x] > data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y + 1][x], r2: data[y - 1][x] });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _sortRoomConnectors(roomConnectors);\r\n\r\n  const conCount = roomConnectors.length;\r\n  let cur;\r\n  let nxt;\r\n  for (cur = 0; cur < conCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < conCount; nxt++) {\r\n      if (roomConnectors[nxt].r1 !== roomConnectors[cur].r1 || roomConnectors[nxt].r2 !== roomConnectors[cur].r2) {\r\n        break;\r\n      }\r\n    }\r\n    if (links[roomConnectors[cur].r1] !== links[roomConnectors[cur].r2]) {\r\n      const apl = roomConnectors[Math.floor(cur + (nxt - cur) / 2)];\r\n      const min = Math.min(links[apl.r1], links[apl.r2]);\r\n      const max = Math.max(links[apl.r1], links[apl.r2]);\r\n      links[apl.r1] = min;\r\n      links[apl.r2] = min;\r\n      for (let i = 1; i <= roomCount; i++) {\r\n        if (links[i] === max) {\r\n          links[i] = min;\r\n        }\r\n      }\r\n      data[apl.y][apl.x] = roomCount + 1;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    room.id = i + 1;\r\n    room.group = links[room.id];\r\n  }\r\n\r\n  _sortRooms_GroupAndId(rooms);\r\n\r\n  let groups = 0;\r\n\r\n  for (cur = 0; cur < roomCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < roomCount; nxt++) {\r\n      if (rooms[nxt].group !== rooms[cur].group) {\r\n        break;\r\n      }\r\n    }\r\n    groups++;\r\n    for (let apl = cur; apl < nxt; apl++) {\r\n      rooms[apl].group = groups;\r\n    }\r\n  }\r\n\r\n  const roomInfoList = {};\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    for (let j = i + 1; j < roomCount; j++) {\r\n      if (rooms[i].group === rooms[j].group) {\r\n        continue;\r\n      }\r\n\r\n      const alignmentAndDistance = _getAlignmentAndDistance(rooms[i], rooms[j]);\r\n\r\n      if (!alignmentAndDistance) {\r\n        continue;\r\n      }\r\n\r\n      const { alignment, distance, x, y, horizontal } = alignmentAndDistance;\r\n\r\n      if (alignment === 0) {\r\n        continue;\r\n      }\r\n\r\n      const g1 = rooms[i].group;\r\n      const g2 = rooms[j].group;\r\n      const key = g1 + '_' + g2;\r\n\r\n      if (!roomInfoList[key]) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      } else if (roomInfoList[key].distance > distance || (roomInfoList[key].distance === distance && roomInfoList[key].alignment < alignmentAndDistance)) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      }\r\n    }\r\n  }\r\n\r\n  const groupConnectors = [];\r\n\r\n  for (let prop in roomInfoList) {\r\n    if (roomInfoList.hasOwnProperty(prop)) {\r\n      groupConnectors.push(roomInfoList[prop]);\r\n    }\r\n  }\r\n\r\n  _sortGroupConnectors(groupConnectors);\r\n\r\n  const groupLinks = [];\r\n\r\n  for (let i = 0; i <= groups; i++) {\r\n    groupLinks.push(i);\r\n  }\r\n\r\n  for (let i = 0; i < groupConnectors.length; i++) {\r\n    const groupConnector = groupConnectors[i];\r\n    if (groupLinks[groupConnector.g1] !== groupLinks[groupConnector.g2]) {\r\n      const min = Math.min(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      const max = Math.max(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      groupLinks[groupConnector.g1] = min;\r\n      groupLinks[groupConnector.g2] = min;\r\n      for (let i = 1; i <= groups; i++) {\r\n        if (groupLinks[i] === max) {\r\n          groupLinks[i] = min;\r\n        }\r\n      }\r\n\r\n      const { x, y, distance, horizontal } = groupConnector;\r\n\r\n      if (horizontal) {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y][x + o] = roomCount + 1;\r\n        }\r\n      } else {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y + o][x] = roomCount + 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  let connected = true;\r\n\r\n  for (let i = 1; i <= groups; i++) {\r\n    if (groupLinks[i] !== 1) {\r\n      connected = false;\r\n    }\r\n  }\r\n\r\n  _sortRooms_Id(rooms);\r\n\r\n  return {\r\n    width,\r\n    height,\r\n    data,\r\n    rooms,\r\n    connected\r\n  };\r\n}\r\n\r\nexport function getPlayerStartingLocation(map) {\r\n  const { width, height, data } = map;\r\n  const visited = [];\r\n  for (let i = 0; i < height; i++) {\r\n    visited.push(new Array(width).fill(0));\r\n  }\r\n  const bossRoom = map.rooms[0];\r\n  let x = Math.floor(bossRoom.x + bossRoom.width / 2);\r\n  let y = Math.floor(bossRoom.y + bossRoom.height / 2);\r\n  let room = 1;\r\n  const q = [];\r\n  q.push({ x, y });\r\n  while (q.length > 0) {\r\n    const size = q.length;\r\n    for (let i = 0; i < size; i++) {\r\n      const top = q.shift();\r\n      room = data[top.y][top.x];\r\n      for (let j = 0; j < 4; j++) {\r\n        const dir = _directions[j];\r\n        if (top.x + dir.x < 0 || top.x + dir.x > width - 1 || top.y + dir.y < 0 || top.y + dir.y > height - 1) {\r\n          continue;\r\n        }\r\n        if (data[top.y + dir.y][top.x + dir.x] !== 0) {\r\n          if (visited[top.y + dir.y][top.x + dir.x] === 0) {\r\n            visited[top.y + dir.y][top.x + dir.x] = 1;\r\n            q.push({ x: top.x + dir.x, y: top.y + dir.y });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const playerRoom = map.rooms[room - 1];\r\n  x = Math.floor(playerRoom.x + playerRoom.width / 2);\r\n  y = Math.floor(playerRoom.y + playerRoom.height / 2);\r\n  return { x, y };\r\n}\r\n\r\nfunction _range(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction _makeOdd(value) {\r\n  return Math.floor(value / 2) * 2 + 1;\r\n}\r\n\r\nfunction _pickRandom(data) {\r\n  return data[Math.floor(Math.random() * data.length)];\r\n}\r\n\r\nfunction _sortRooms_LargestToSmallest(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    const priArea = pri.width * pri.height;\r\n    const secArea = sec.width * sec.height;\r\n    if (priArea < secArea) {\r\n      return 1;\r\n    } else if (priArea > secArea) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRooms_GroupAndId(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.group < sec.group) {\r\n      return -1;\r\n    } else if (pri.group > sec.group) {\r\n      return 1;\r\n    }\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRooms_Id(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRoomConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.r1 < sec.r1) { return -1; }\r\n    else if (pri.r1 > sec.r1) { return 1; }\r\n    if (pri.r2 < sec.r2) { return -1; }\r\n    else if (pri.r2 > sec.r2) { return 1; }\r\n    if (pri.x < sec.x) { return -1; }\r\n    else if (pri.x > sec.x) { return 1; }\r\n    if (pri.y < sec.y) { return -1; }\r\n    else if (pri.y > sec.y) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortGroupConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.distance < sec.distance) { return -1; }\r\n    else if (pri.distance > sec.distance) { return 1; }\r\n    if (pri.alignment < sec.alignment) { return -1; }\r\n    else if (pri.alignment > sec.alignment) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _doRoomsOverlap(pri, sec, bx, by) {\r\n  if (pri.x >= sec.x + sec.width + bx || sec.x >= pri.x + pri.width + bx) {\r\n    return false;\r\n  }\r\n  if (pri.y >= sec.y + sec.height + by || sec.y >= pri.y + pri.height + by) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction _getAlignmentAndDistance(room1, room2) {\r\n  if (room1.y > room2.y + room2.height || room2.y > room1.y + room1.height) {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      return null;\r\n    } else {\r\n      let y;\r\n      let distance;\r\n      if (room1.y > room2.y + room2.height) {\r\n        y = room2.y + room2.height\r\n        distance = room1.y - y;\r\n      } else {\r\n        y = room1.y + room1.height;\r\n        distance = room2.y - y;\r\n      }\r\n      const max = Math.min(room1.x + room1.width, room2.x + room2.width);\r\n      const min = Math.max(room1.x, room2.x)\r\n      const x = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: false };\r\n    }\r\n  } else {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      let x\r\n      let distance;\r\n      if (room1.x > room2.x + room2.width) {\r\n        x = room2.x + room2.width;\r\n        distance = room1.x - x;\r\n      } else {\r\n        x = room1.x + room1.width;\r\n        distance = room2.x - x;\r\n      }\r\n      const max = Math.min(room1.y + room1.height, room2.y + room2.height);\r\n      const min = Math.max(room1.y, room2.y)\r\n      const y = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { generateDungeon, getPlayerStartingLocation } from '../lib/map';\r\n\r\n// Take Home Projects - Build a Roguelike Dungeon Crawler Game\r\n// Objective: Build a CodePen.io app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/apLXEJ/.\r\n// Fulfill the below user stories. Use whichever libraries or APIs you need. Give it your own personal style.\r\n// User Story: I have health, a level, and a weapon. I can pick up a better weapon. I can pick up health items.\r\n// User Story: All the items and enemies on the map are arranged at random.\r\n// User Story: I can move throughout a map, discovering items.\r\n// User Story: I can move anywhere within the map's boundaries, but I can't move through an enemy until I've beaten it.\r\n// User Story: Much of the map is hidden. When I take a step, all spaces that are within a certain number of spaces from me are revealed.\r\n// User Story: When I beat an enemy, the enemy goes away and I get XP, which eventually increases my level.\r\n// User Story: When I fight an enemy, we take turns damaging each other until one of us loses. I do damage based off of my level and my weapon. The enemy does damage based off of its level. Damage is somewhat random within a range.\r\n// User Story: When I find and beat the boss, I win.\r\n// User Story: The game should be challenging, but theoretically winnable.\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\r\n    this.onClick = this.onClick.bind(this);\r\n    this.keys = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._resizeViewport();\r\n    this._updateMap();\r\n    window.addEventListener('resize', this.onResize);\r\n    window.addEventListener('keydown', this.onKeyDown);\r\n    window.addEventListener('keyup', this.onKeyUp);\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.onResize);\r\n    window.removeEventListener('keydown', this.onKeyDown);\r\n    window.removeEventListener('keyup', this.onKeyUp);\r\n    window.cancelAnimationFrame(this.frame);\r\n  }\r\n\r\n  onResize() {\r\n    this._resizeViewport();\r\n  }\r\n\r\n  onKeyDown(event) {\r\n    event.preventDefault();\r\n    if (!this.keys[event.key]) {\r\n      this.onKeyPress(event.key);\r\n      this.keys[event.key] = true;\r\n      if (this.captureKeys) {\r\n        this.state.scene.keyboardState(this.keys);\r\n      }\r\n    }\r\n  }\r\n\r\n  onKeyUp(event) {\r\n    event.preventDefault();\r\n    this.keys[event.key] = false;\r\n    if (this.captureKeys) {\r\n      this.state.scene.keyboardState(this.keys);\r\n    }\r\n  }\r\n\r\n  onKeyPress(key) {\r\n    const { map, player } = this.state;\r\n    let dx = 0;\r\n    let dy = 0;\r\n    if (key === 'ArrowUp') {\r\n      dy = -1;\r\n    } else if (key === 'ArrowDown') {\r\n      dy = 1;\r\n    } else if (key === 'ArrowLeft') {\r\n      dx = -1;\r\n    } else if (key === 'ArrowRight') {\r\n      dx = 1;\r\n    }\r\n    if (dx !== 0 || dy !== 0) {\r\n      if (map.data[player.y + dy][player.x + dx] !== 0) {\r\n        this.setState({\r\n          player: {\r\n            x: player.x + dx,\r\n            y: player.y + dy\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  onAnimationFrame() {\r\n    this._drawMap();\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  onClick() {\r\n    this._updateMap();\r\n  }\r\n\r\n  _resizeViewport() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n  }\r\n\r\n  _updateMap() {\r\n    let map = generateDungeon(53, 27);\r\n    while (map.rooms.length < 25) {\r\n      map = generateDungeon(53, 27);\r\n    }\r\n    const player = getPlayerStartingLocation(map);\r\n    this.setState({\r\n      map,\r\n      player\r\n    });\r\n  }\r\n\r\n  _drawMap() {\r\n    if (!this.state || !this.state.map) {\r\n      return;\r\n    }\r\n    const { width, height, data, rooms } = this.state.map;\r\n    const player = this.state.player;\r\n    const ctx = this.canvas.getContext('2d');\r\n    ctx.fillStyle = '#FFFFFF';\r\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    const cellWidth = Math.floor(this.canvas.width / width);\r\n    const cellHeight = Math.floor(this.canvas.height / height);\r\n    const xOffset = Math.floor((this.canvas.width - width * cellWidth) / 2);\r\n    const yOffset = Math.floor((this.canvas.height - height * cellHeight) / 2);\r\n    const colors = ['#7F0000', '#007F00', '#00007F', '#7F7F00', '#7F007F', '#007F7F', '#7F3F3F', '#3F7F3F', '#3F3F7F', '#7F7F3F', '#7F3F7F', '#3F7F7F'];\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        if (data[y][x] !== 0) {\r\n          if (data[y][x] <= rooms.length) {\r\n            const room = rooms[data[y][x] - 1];\r\n            ctx.fillStyle = colors[(room.group - 1) % colors.length];\r\n\r\n          } else {\r\n            ctx.fillStyle = '#000000';\r\n          }\r\n          ctx.fillRect(xOffset + x * cellWidth + 1, yOffset + y * cellHeight + 1, cellWidth - 2, cellHeight - 2);\r\n          ctx.fillStyle = '#FFFFFF';\r\n          ctx.font = '8px monospace';\r\n          ctx.textAlign = 'center';\r\n          ctx.textBaseline = 'middle';\r\n          ctx.fillText(data[y][x].toString(), xOffset + x * cellWidth + cellWidth / 2, yOffset + y * cellHeight + cellHeight / 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    ctx.fillStyle = '#7F7FFF';\r\n    ctx.beginPath();\r\n    ctx.arc(xOffset + player.x * cellWidth + cellWidth / 2, yOffset + player.y * cellHeight + cellHeight / 2, Math.min(cellWidth / 4, cellHeight / 4) - 1, 0, Math.PI * 2);\r\n    ctx.fill();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"screen\">\r\n        <canvas id=\"canvas\" ref={elem => this.canvas = elem} onClick={this.onClick}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}