{"version":3,"sources":["components/Controls.js","lib/map.js","components/App.js","serviceWorker.js","index.js"],"names":["DescriptionControl","props","control","className","description","SelectControl","options","i","length","push","key","value","htmlFor","name","id","onChange","event","target","BoolControl","type","checked","IntControl","min","max","FloatControl","toFixed","Math","floor","FunctionControl","onClick","function","Controls","controls","show","title","onClickPrevious","onClickNext","map","option","index","_directions","x","y","generateDungeon","width","height","zones","bossRoom","data","Array","fill","goal","minSize","maxSize","roomSize","power","s","count","pow","c","rooms","areaGoal","area","size","_pickRandom","room","random","_generateRooms","sort","pri","sec","priArea","secArea","maxRooms","loc","j","t","_shuffle","xStep","yStep","zone","_generateZones","placedRooms","roomCount","hasOwnProperty","minX","maxX","minY","maxY","isPlaced","_range","overlap","_doRoomsOverlap","_placeRoomsByZone","undefined","placed","filter","_placeRooms","h","w","links","roomConnectors","r1","r2","connectors","cur","nxt","conCount","apl","group","_connectNearbyRooms","_sortRooms_GroupAndId","groups","roomInfoList","alignmentAndDistance","_getAlignmentAndDistance","alignment","distance","horizontal","g1","g2","room1","room2","groupConnectors","prop","groupLinks","groupConnector","o","connected","_connectDistantRooms","_sortRooms_Id","bx","by","App","onResize","bind","onKeyDown","onKeyUp","onAnimationFrame","updateMap","keys","state","showControls","mode","modes","this","_resizeViewport","window","addEventListener","frame","requestAnimationFrame","removeEventListener","cancelAnimationFrame","preventDefault","onKeyPress","captureKeys","scene","keyboardState","player","setState","dx","dy","_drawMap","setOption","forceUpdate","canvas","rect","getBoundingClientRect","visited","q","top","shift","dir","playerRoom","getPlayerStartingLocation","ctx","getContext","fillStyle","fillRect","cellWidth","cellHeight","xOffset","yOffset","colors","font","textAlign","textBaseline","fillText","toString","boss","ref","elem","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAEMA,EAAqB,SAACC,GAAW,IAC7BC,EAAYD,EAAZC,QACR,OACE,yBAAKC,UAAU,WACZD,EAAQE,cAKTC,EAAgB,SAACJ,GAMrB,IAN+B,IAIvBC,EAAYD,EAAZC,QACFI,EAAU,GACPC,EAAI,EAAGA,EAAIL,EAAQI,QAAQE,OAAQD,IAC1CD,EAAQG,KACL,4BAAQC,IAAKH,EAAGI,MAAOJ,GAAIL,EAAQI,QAAQC,KAGhD,OACE,yBAAKJ,UAAU,WACb,2BAAOS,QAASV,EAAQW,MAAOX,EAAQW,MACvC,4BAAQC,GAAIZ,EAAQW,KAAMV,UAAU,aAAaQ,MAAOT,EAAQS,MAAOI,SAb3E,SAAkBC,GAChBf,EAAMc,SAASb,EAASc,EAAMC,OAAON,SAahCL,KAMHY,EAAc,SAACjB,GAAU,IAIrBC,EAAYD,EAAZC,QACR,OACE,yBAAKC,UAAU,WACb,2BAAOA,UAAU,YAAYS,QAASV,EAAQW,MAAM,2BAAOV,UAAU,YAAYW,GAAIZ,EAAQW,KAAMM,KAAK,WAAWC,QAASlB,EAAQS,MAAOI,SAN/I,SAAkBC,GAChBf,EAAMc,SAASb,EAASc,EAAMC,OAAOG,YAK+HlB,EAAQW,QAK1KQ,EAAa,SAACpB,GAAU,IAIpBC,EAAYD,EAAZC,QACR,OACE,yBAAKC,UAAU,WACb,2BAAOS,QAASV,EAAQW,MAAOX,EAAQW,KAAvC,IAA8CX,EAAQS,OACtD,2BAAOG,GAAIZ,EAAQW,KAAMV,UAAU,YAAYgB,KAAK,QAAQG,IAAKpB,EAAQoB,IAAKC,IAAKrB,EAAQqB,IAAKZ,MAAOT,EAAQS,MAAOI,SAP1H,SAAkBC,GAChBf,EAAMc,SAASb,EAASc,EAAMC,OAAON,YAWnCa,EAAe,SAACvB,GAAU,IAKtBC,EAAYD,EAAZC,QACR,OACE,yBAAKC,UAAU,WACb,2BAAOS,QAASV,EAAQW,MAAOX,EAAQW,KAAvC,IAA8CX,EAAQS,MAAMc,QAAQ,IACpE,2BAAOX,GAAIZ,EAAQW,KAAMV,UAAU,YAAYgB,KAAK,QAAQG,IAAKI,KAAKC,MAR3D,IAQiEzB,EAAQoB,KAAeC,IAAKG,KAAKC,MARlG,IAQwGzB,EAAQqB,KAAeZ,MAAOe,KAAKC,MAR3I,IAQiJzB,EAAQS,OAAiBI,SAPzL,SAAkBC,GAChBf,EAAMc,SAASb,EAASc,EAAMC,OAAON,MAFxB,UAaXiB,EAAkB,SAAC3B,GAAU,IAIzBC,EAAYD,EAAZC,QACR,OACE,yBAAKC,UAAU,WACb,4BAAQ0B,QANZ,SAAiBb,GACfd,EAAQ4B,aAKqB5B,EAAQW,QA8C1BkB,EAzCE,SAAC,GAAsE,IAIlFC,EAJcC,EAAmE,EAAnEA,KAAMC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,gBAAiBC,EAAqC,EAArCA,YAAarB,EAAwB,EAAxBA,SAAUT,EAAc,EAAdA,QACvE,OAAK2B,GAID3B,IACF0B,EAAW1B,EAAQ+B,KAAI,SAACC,EAAQC,GAC9B,OAAQD,EAAOnB,MACb,IAAK,cACH,OAAO,kBAAC,EAAD,CAAoBT,IAAK6B,EAAOrC,QAASoC,IAClD,IAAK,SACH,OAAO,kBAAC,EAAD,CAAe5B,IAAK6B,EAAOrC,QAASoC,EAAQvB,SAAUA,IAC/D,IAAK,OACH,OAAO,kBAAC,EAAD,CAAaL,IAAK6B,EAAOrC,QAASoC,EAAQvB,SAAUA,IAC7D,IAAK,MACH,OAAO,kBAAC,EAAD,CAAYL,IAAK6B,EAAOrC,QAASoC,EAAQvB,SAAUA,IAC5D,IAAK,QACH,OAAO,kBAAC,EAAD,CAAcL,IAAK6B,EAAOrC,QAASoC,EAAQvB,SAAUA,IAC9D,IAAK,WACH,OAAO,kBAAC,EAAD,CAAiBL,IAAK6B,EAAOrC,QAASoC,IAC/C,QACE,OACE,yBAAK5B,IAAK6B,EAAOpC,UAAU,WAAWmC,EAAOnB,KAA7C,0BAMR,yBAAKL,GAAG,YACN,yBAAKX,UAAU,QACb,0BAAMA,UAAU,OAAO0B,QAASM,GAAhC,eACA,0BAAMhC,UAAU,QAAQ0B,QAASO,GAAjC,eACA,yBAAKjC,UAAU,gBAAgB+B,IAEjC,6BACGF,KAjCE,MCrFLQ,EAAc,CAClB,CAAEC,EAAG,EAAGC,GAAI,GACZ,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,GAAI,EAAGC,EAAG,IAGP,SAASC,EAAgBrC,GAG9B,IAHwC,IAChCsC,EAAmCtC,EAAnCsC,MAAOC,EAA4BvC,EAA5BuC,OAAQC,EAAoBxC,EAApBwC,MAAOC,EAAazC,EAAbyC,SACxBC,EAAO,GACJN,EAAI,EAAGA,EAAIG,EAAQH,IAC1BM,EAAKvC,KAAK,IAAIwC,MAAML,GAAOM,KAAK,IAGlC,IAAMb,EAAM,CACVO,QACAC,SACAG,SAoFJ,SAAwBX,EAAK/B,GAAU,IAC7BsC,EAAkBP,EAAlBO,MAAOC,EAAWR,EAAXQ,OACTM,EAA2B7C,EAA3B6C,KAAMC,EAAqB9C,EAArB8C,QAASC,EAAY/C,EAAZ+C,QAChBF,IACHA,EAAO,IAEJC,IACHA,EAAU,GAEPC,IACHA,EAAU3B,KAAKH,IAAIG,KAAKC,MAAMD,KAAKJ,IAAIsB,EAAQ,EAAGC,EAAS,IAAKO,IAIlE,IAFA,IAAME,EAAW,GACbC,EAAQ,EACHC,EAAIH,EAASG,GAAKJ,EAASI,IAElC,IADA,IAAMC,EAAQ/B,KAAKgC,IAAI,EAAGH,KACjBI,EAAI,EAAGA,EAAIF,EAAOE,IACzBL,EAAS7C,KAAK+C,GAIlB,IAAII,EAAQ,GACNC,EAAWjB,EAAQC,EAASM,EAC9BW,EAAO,EACX,KAAOA,EAAOD,GAAU,CACtB,IAAME,EAAOC,EAAYV,GACnBW,EAAO,CAAErB,MAAOmB,EAAMlB,OAAQkB,GAChCrC,KAAKwC,SAAW,KACdxC,KAAKwC,SAAW,GAClBD,EAAKrB,OAAS,EAEdqB,EAAKpB,QAAU,GAGnBe,EAAMnD,KAAKwD,GACXH,GAAQG,EAAKrB,MAAQqB,EAAKpB,OAE5BR,EAAIuB,MAAQA,EAtHZO,CAAe9B,EAAK/B,GAES+B,EAAIuB,MAsb3BQ,MAAK,SAACC,EAAKC,GACf,IAAMC,EAAUF,EAAIzB,MAAQyB,EAAIxB,OAC1B2B,EAAUF,EAAI1B,MAAQ0B,EAAIzB,OAChC,OAAI0B,EAAUC,EACL,EACED,EAAUC,GACX,EAEH,KA7c8B,IAiBjCC,EAAanE,EAAbmE,SAEN,GAAI3B,GAASA,EAAQ,EAAG,CAEtB,GAiHJ,SAAwBT,EAAKoB,GAG3B,IAHmC,IAC3Bb,EAAkBP,EAAlBO,MAAOC,EAAWR,EAAXQ,OACT6B,EAAM,GACHnE,EAAI,EAAGA,EAAIkD,EAAOlD,IACzBmE,EAAInE,GAAKA,GAgTb,SAAkByC,GAEhB,IADA,IACSzC,EADCyC,EAAKxC,OACE,EAAGD,EAAI,EAAGA,IAAK,CAC9B,IAAMoE,EAAIjD,KAAKC,MAAMD,KAAKwC,UAAY3D,EAAI,IACpCqE,EAAI5B,EAAKzC,GACfyC,EAAKzC,GAAKyC,EAAK2B,GACf3B,EAAK2B,GAAKC,GAnTZC,CAASH,GAOT,IALA,IAAMI,EAAQpD,KAAKC,OAAOiB,EAAQ,GAAKa,GACjCsB,EAAQrD,KAAKC,OAAOkB,EAAS,GAAKY,GAElCX,EAAQ,GAELvC,EAAI,EAAGA,EAAIkD,EAAOlD,IAAK,CAC9B,IAAMyE,EAAO,CAAEvC,EAAGlC,EAAIuE,EAAQ,EAAGpC,EAAGgC,EAAInE,GAAKwE,EAAQ,EAAGnC,MAAOkC,EAAOjC,OAAQkC,GAC9EjC,EAAMrC,KAAKuE,GAGb3C,EAAIS,MAAQA,EArIVmC,CAAe5C,EAAKS,GAChBC,EAAU,CACZ,IAAMkB,EAAO5B,EAAIuB,MAAM,GACjBoB,EAAO3C,EAAIS,MAAM,GACnBmB,EAAKrB,OAASoC,EAAKpC,OAASqB,EAAKpB,QAAUmC,EAAKnC,SAClDoB,EAAKxB,EAAIf,KAAKC,MAAMqD,EAAKvC,GACzBwB,EAAKvB,EAAIhB,KAAKC,MAAMqD,EAAKtC,GAAKsC,EAAKnC,OAASoB,EAAKpB,QAAU,IAG/D,IAAMqC,EA+HV,SAA2B7C,EAAKoC,GAM9B,IANyC,IACjC7B,EAAgCP,EAAhCO,MAAOC,EAAyBR,EAAzBQ,OAAQe,EAAiBvB,EAAjBuB,MAAOd,EAAUT,EAAVS,MAE1BoC,EAAc,EACdF,EAAO,EACLG,EAAYvB,EAAMpD,OACfD,EAAI,EAAGA,EAAI4E,KACdV,GAAYS,IAAgBT,GADHlE,IAAK,CAIlC,IAAM0D,EAAOL,EAAMrD,GACnB,IAAI0D,EAAKmB,eAAe,OAAQnB,EAAKmB,eAAe,KAApD,CAGA,IAAMC,EAAOvC,EAAMkC,GAAMvC,EACnB6C,EAAO5D,KAAKJ,IAAIwB,EAAMkC,GAAMvC,EAAIK,EAAMkC,GAAMpC,MAAOA,EAAQqB,EAAKrB,MAAQ,GACxE2C,EAAOzC,EAAMkC,GAAMtC,EACnB8C,EAAO9D,KAAKJ,IAAIwB,EAAMkC,GAAMtC,EAAII,EAAMkC,GAAMnC,OAAQA,EAASoB,EAAKpB,OAAS,GACjF,KAAIwC,EAAOpB,EAAKrB,MAAQA,EAAQ,GAAK2C,EAAOtB,EAAKpB,OAASA,EAAS,GAAnE,CAIA,IADA,IAAI4C,GAAW,EACNb,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAC5BX,EAAKxB,EAAIiD,EAAOL,EAAMC,GACtBrB,EAAKvB,EAAIgD,EAAOH,EAAMC,GAEtB,IADA,IAAIG,GAAU,EACLhB,EAAI,EAAGA,EAAIQ,EAAWR,IAC7B,GAAIA,IAAMpE,GAAMqD,EAAMe,GAAGS,eAAe,MAASxB,EAAMe,GAAGS,eAAe,MAGrEQ,EAAgB3B,EAAML,EAAMe,GAAI,EAAG,GAAI,CACzCgB,GAAU,EACV,MAGJ,IAAKA,EAAS,CACZF,GAAW,EACX,OAGAA,GACFP,IACAF,GAAQA,EAAO,GAAKlC,EAAMtC,gBAEnByD,EAAKxB,SACLwB,EAAKvB,KAIhB,OAAOwC,EAhLeW,CAAkBxD,EAAKoC,QAC1BqB,IAAbrB,IACFA,GAAYS,QAGd,GAAInC,EAAU,CACZ,IAAMkB,EAAO5B,EAAIuB,MAAM,GACnBK,EAAKrB,OAASA,EAAQ,GAAKqB,EAAKpB,QAAUA,EAAS,IACrDoB,EAAKxB,EAAIf,KAAKC,OAAOiB,EAAQqB,EAAKrB,OAAS,GAC3CqB,EAAKvB,EAAIhB,KAAKC,OAAOkB,EAASoB,EAAKpB,QAAU,IAanD,OA6JF,SAAqBR,EAAKoC,GAKxB,IALmC,IAC3B7B,EAAyBP,EAAzBO,MAAOC,EAAkBR,EAAlBQ,OAAQe,EAAUvB,EAAVuB,MAEnBsB,EAAc,EACZC,EAAYvB,EAAMpD,OACfD,EAAI,EAAGA,EAAI4E,SACDW,IAAbrB,GAA0BS,IAAgBT,GADjBlE,IAAK,CAIlC,IAAM0D,EAAOL,EAAMrD,GACnB,IAAI0D,EAAKmB,eAAe,OAAQnB,EAAKmB,eAAe,KAApD,CAIA,IADA,IAAIW,GAAS,EACJnB,EAAI,EAAGA,EAAI,IAAMA,IAAK,CAC7BX,EAAKxB,EAAIiD,EAAO,EAAG9C,EAAQqB,EAAKrB,MAAQ,GACxCqB,EAAKvB,EAAIgD,EAAO,EAAG7C,EAASoB,EAAKpB,OAAS,GAE1C,IADA,IAAI8C,GAAU,EACLhB,EAAI,EAAGA,EAAIQ,EAAWR,IAC7B,GAAIA,IAAMpE,GAAMqD,EAAMe,GAAGS,eAAe,MAASxB,EAAMe,GAAGS,eAAe,MAGrEQ,EAAgB3B,EAAML,EAAMe,GAAIV,EAAKrB,OAAS,EAAI,EAAI,EAAGqB,EAAKpB,QAAU,EAAI,EAAI,GAAI,CACtF8C,GAAU,EACV,MAGJ,IAAKA,EAAS,CACZI,GAAS,EACT,OAGAA,EACFb,YAEOjB,EAAKxB,SACLwB,EAAKvB,IAIhBL,EAAIuB,MAAQvB,EAAIuB,MAAMoC,QAAO,SAAC/B,GAAD,OAAUA,EAAKxB,GAAKwB,EAAKvB,KAE/CL,EAAIuB,MAAMpD,OA/MjByF,CAAY5D,EAAKoC,GAkNnB,YAGE,IAH4D,IAA/B7B,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,OAAQG,EAAe,EAAfA,KAAMY,EAAS,EAATA,MAC5CuB,EAAYvB,EAAMpD,OAEfD,EAAI,EAAGA,EAAI4E,EAAW5E,IAAK,CAClC,IAAM0D,EAAOL,EAAMrD,GACnB0D,EAAKnD,GAAKP,EAAI,EACd,IAAK,IAAI2F,EAAI,EAAGA,EAAIjC,EAAKpB,OAAQqD,IAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAIlC,EAAKrB,MAAOuD,IAC9BnD,EAAKiB,EAAKvB,EAAIwD,GAAGjC,EAAKxB,EAAI0D,GAAKlC,EAAKnD,GAM1C,IADA,IAAMsF,EAAQ,GACL7F,EAAI,EAAGA,GAAK4E,EAAW5E,IAC9B6F,EAAM3F,KAAKF,GAKb,IAFA,IAAM8F,EAAiB,GAEd3D,EAAI,EAAGA,EAAIG,EAAS,EAAGH,IAC9B,IAAK,IAAID,EAAI,EAAGA,EAAIG,EAAQ,EAAGH,IACV,IAAfO,EAAKN,GAAGD,KACa,IAAnBO,EAAKN,EAAI,GAAGD,IAA+B,IAAnBO,EAAKN,EAAI,GAAGD,IAA+B,IAAnBO,EAAKN,GAAGD,EAAI,IAA+B,IAAnBO,EAAKN,GAAGD,EAAI,GAClFO,EAAKN,GAAGD,EAAI,GAAKO,EAAKN,GAAGD,EAAI,GAC/B4D,EAAe5F,KAAK,CAAEgC,IAAGC,IAAG4D,GAAItD,EAAKN,GAAGD,EAAI,GAAI8D,GAAIvD,EAAKN,GAAGD,EAAI,KACvDO,EAAKN,GAAGD,EAAI,GAAKO,EAAKN,GAAGD,EAAI,IACtC4D,EAAe5F,KAAK,CAAEgC,IAAGC,IAAG4D,GAAItD,EAAKN,GAAGD,EAAI,GAAI8D,GAAIvD,EAAKN,GAAGD,EAAI,KAEtC,IAAnBO,EAAKN,GAAGD,EAAI,IAA+B,IAAnBO,EAAKN,GAAGD,EAAI,IAA+B,IAAnBO,EAAKN,EAAI,GAAGD,IAA+B,IAAnBO,EAAKN,EAAI,GAAGD,KACzFO,EAAKN,EAAI,GAAGD,GAAKO,EAAKN,EAAI,GAAGD,GAC/B4D,EAAe5F,KAAK,CAAEgC,IAAGC,IAAG4D,GAAItD,EAAKN,EAAI,GAAGD,GAAI8D,GAAIvD,EAAKN,EAAI,GAAGD,KACvDO,EAAKN,EAAI,GAAGD,GAAKO,EAAKN,EAAI,GAAGD,IACtC4D,EAAe5F,KAAK,CAAEgC,IAAGC,IAAG4D,GAAItD,EAAKN,EAAI,GAAGD,GAAI8D,GAAIvD,EAAKN,EAAI,GAAGD,OA8M/C+D,EAvMPH,EAwMpBG,EAAWpC,MAAK,SAACC,EAAKC,GACpB,OAAID,EAAIiC,GAAKhC,EAAIgC,IAAc,EACtBjC,EAAIiC,GAAKhC,EAAIgC,GAAa,EAC/BjC,EAAIkC,GAAKjC,EAAIiC,IAAc,EACtBlC,EAAIkC,GAAKjC,EAAIiC,GAAa,EAC/BlC,EAAI5B,EAAI6B,EAAI7B,GAAa,EACpB4B,EAAI5B,EAAI6B,EAAI7B,EAAY,EAC7B4B,EAAI3B,EAAI4B,EAAI5B,GAAa,EACpB2B,EAAI3B,EAAI4B,EAAI5B,EAAY,EAC1B,KAVX,IAA6B8D,EArM3B,IACIC,EACAC,EAFEC,EAAWN,EAAe7F,OAGhC,IAAKiG,EAAM,EAAGA,EAAME,EAAUF,EAAMC,EAAK,CACvC,IAAKA,EAAMD,EAAM,EAAGC,EAAMC,IACpBN,EAAeK,GAAKJ,KAAOD,EAAeI,GAAKH,IAAMD,EAAeK,GAAKH,KAAOF,EAAeI,GAAKF,IADtEG,KAKpC,GAAIN,EAAMC,EAAeI,GAAKH,MAAQF,EAAMC,EAAeI,GAAKF,IAAK,CACnE,IAAMK,EAAMP,EAAe3E,KAAKC,MAAM8E,GAAOC,EAAMD,GAAO,IACpDnF,EAAMI,KAAKJ,IAAI8E,EAAMQ,EAAIN,IAAKF,EAAMQ,EAAIL,KACxChF,EAAMG,KAAKH,IAAI6E,EAAMQ,EAAIN,IAAKF,EAAMQ,EAAIL,KAC9CH,EAAMQ,EAAIN,IAAMhF,EAChB8E,EAAMQ,EAAIL,IAAMjF,EAChB,IAAK,IAAIf,EAAI,EAAGA,GAAK4E,EAAW5E,IAC1B6F,EAAM7F,KAAOgB,IACf6E,EAAM7F,GAAKe,GAGf0B,EAAK4D,EAAIlE,GAAGkE,EAAInE,GAAK0C,EAAY,GAIrC,IAAK,IAAI5E,EAAI,EAAGA,EAAI4E,EAAW5E,IAAK,CAClC,IAAM0D,EAAOL,EAAMrD,GACnB0D,EAAK4C,MAAQT,EAAMnC,EAAKnD,KApR1BgG,CAAoBzE,GAwRtB,SAA8BA,GAAM,IAC1BW,EAAgBX,EAAhBW,KAAMY,EAAUvB,EAAVuB,MAERuB,EAAYvB,EAAMpD,QAyI1B,SAA+BoD,GAC7BA,EAAMQ,MAAK,SAACC,EAAKC,GACf,OAAID,EAAIwC,MAAQvC,EAAIuC,OACV,EACCxC,EAAIwC,MAAQvC,EAAIuC,MAClB,EAELxC,EAAIvD,GAAKwD,EAAIxD,IACP,EACCuD,EAAIvD,GAAKwD,EAAIxD,GACf,EAEF,KAnJTiG,CAAsBnD,GAEtB,IAEI6C,EACAC,EAHAM,EAAS,EAKb,IAAKP,EAAM,EAAGA,EAAMtB,EAAWsB,EAAMC,EAAK,CACxC,IAAKA,EAAMD,EAAM,EAAGC,EAAMvB,GACpBvB,EAAM8C,GAAKG,QAAUjD,EAAM6C,GAAKI,MADDH,KAKrCM,IACA,IAAK,IAAIJ,EAAMH,EAAKG,EAAMF,EAAKE,IAC7BhD,EAAMgD,GAAKC,MAAQG,EAMvB,IAFA,IAAMC,EAAe,GAEZ1G,EAAI,EAAGA,EAAI4E,EAAW5E,IAC7B,IAAK,IAAIoE,EAAIpE,EAAI,EAAGoE,EAAIQ,EAAWR,IACjC,GAAIf,EAAMrD,GAAGsG,QAAUjD,EAAMe,GAAGkC,MAAhC,CAIA,IAAMK,EAAuBC,EAAyBvD,EAAMrD,GAAIqD,EAAMe,IAEtE,GAAKuC,EAAL,CAPsC,IAW9BE,EAA0CF,EAA1CE,UAAWC,EAA+BH,EAA/BG,SAAU5E,EAAqByE,EAArBzE,EAAGC,EAAkBwE,EAAlBxE,EAAG4E,EAAeJ,EAAfI,WAEnC,GAAkB,IAAdF,EAAJ,CAIA,IAAMG,EAAK3D,EAAMrD,GAAGsG,MACdW,EAAK5D,EAAMe,GAAGkC,MACdnG,EAAM6G,EAAK,IAAMC,EAElBP,EAAavG,IAEPuG,EAAavG,GAAK2G,SAAWA,GAAaJ,EAAavG,GAAK2G,WAAaA,GAAYJ,EAAavG,GAAK0G,UAAYF,KAC5HD,EAAavG,GAAO,CAAE2G,WAAUE,KAAIC,KAAIC,MAAO7D,EAAMrD,GAAGO,GAAI4G,MAAO9D,EAAMe,GAAG7D,GAAIsG,YAAW3E,IAAGC,IAAG4E,eAFjGL,EAAavG,GAAO,CAAE2G,WAAUE,KAAIC,KAAIC,MAAO7D,EAAMrD,GAAGO,GAAI4G,MAAO9D,EAAMe,GAAG7D,GAAIsG,YAAW3E,IAAGC,IAAG4E,gBAOvG,IAAMK,EAAkB,GAExB,IAAK,IAAIC,KAAQX,EACXA,EAAa7B,eAAewC,IAC9BD,EAAgBlH,KAAKwG,EAAaW,IAyHVpB,EArHPmB,EAsHrBnB,EAAWpC,MAAK,SAACC,EAAKC,GACpB,OAAID,EAAIgD,SAAW/C,EAAI+C,UAAoB,EAClChD,EAAIgD,SAAW/C,EAAI+C,SAAmB,EAC3ChD,EAAI+C,UAAY9C,EAAI8C,WAAqB,EACpC/C,EAAI+C,UAAY9C,EAAI8C,UAAoB,EAC1C,KANX,IAA8BZ,EAjH5B,IAFA,IAAMqB,EAAa,GAEVtH,EAAI,EAAGA,GAAKyG,EAAQzG,IAC3BsH,EAAWpH,KAAKF,GAGlB,IAAK,IAAIA,EAAI,EAAGA,EAAIoH,EAAgBnH,OAAQD,IAAK,CAC/C,IAAMuH,EAAiBH,EAAgBpH,GACvC,GAAIsH,EAAWC,EAAeP,MAAQM,EAAWC,EAAeN,IAAK,CACnE,IAAMlG,EAAMI,KAAKJ,IAAIuG,EAAWC,EAAeP,IAAKM,EAAWC,EAAeN,KACxEjG,EAAMG,KAAKH,IAAIsG,EAAWC,EAAeP,IAAKM,EAAWC,EAAeN,KAC9EK,EAAWC,EAAeP,IAAMjG,EAChCuG,EAAWC,EAAeN,IAAMlG,EAChC,IAAK,IAAIf,EAAI,EAAGA,GAAKyG,EAAQzG,IACvBsH,EAAWtH,KAAOgB,IACpBsG,EAAWtH,GAAKe,GAP+C,IAW3DmB,EAA+BqF,EAA/BrF,EAAGC,EAA4BoF,EAA5BpF,EAAG2E,EAAyBS,EAAzBT,SAEd,GAFuCS,EAAfR,WAGtB,IAAK,IAAIS,EAAI,EAAGA,EAAIV,EAAUU,IAC5B/E,EAAKN,GAAGD,EAAIsF,GAAK5C,EAAY,OAG/B,IAAK,IAAI4C,EAAI,EAAGA,EAAIV,EAAUU,IAC5B/E,EAAKN,EAAIqF,GAAGtF,GAAK0C,EAAY,GAMrC9C,EAAI2F,WAAY,EAEhB,IAAK,IAAIzH,EAAI,EAAGA,GAAKyG,EAAQzG,IAC3B,GAAsB,IAAlBsH,EAAWtH,GAAU,CACvB8B,EAAI2F,WAAY,EAChB,OA9XJC,CAAqB5F,GAkbvB,SAAuBuB,GACrBA,EAAMQ,MAAK,SAACC,EAAKC,GACf,OAAID,EAAIvD,GAAKwD,EAAIxD,IACP,EACCuD,EAAIvD,GAAKwD,EAAIxD,GACf,EAEF,KAvbToH,CAAc7F,EAAIuB,OAEXvB,EA+XT,SAASqD,EAAOpE,EAAKC,GACnB,OAAOG,KAAKC,MAAMD,KAAKwC,UAAY3C,EAAMD,EAAM,IAAMA,EAGvD,SAAS0C,EAAYhB,GACnB,OAAOA,EAAKtB,KAAKC,MAAMD,KAAKwC,SAAWlB,EAAKxC,SA6E9C,SAASoF,EAAgBvB,EAAKC,EAAK6D,EAAIC,GACrC,QAAI/D,EAAI5B,GAAK6B,EAAI7B,EAAI6B,EAAI1B,MAAQuF,GAAM7D,EAAI7B,GAAK4B,EAAI5B,EAAI4B,EAAIzB,MAAQuF,MAGhE9D,EAAI3B,GAAK4B,EAAI5B,EAAI4B,EAAIzB,OAASuF,GAAM9D,EAAI5B,GAAK2B,EAAI3B,EAAI2B,EAAIxB,OAASuF,GAMxE,SAASjB,EAAyBM,EAAOC,GACvC,GAAID,EAAM/E,EAAIgF,EAAMhF,EAAIgF,EAAM7E,QAAU6E,EAAMhF,EAAI+E,EAAM/E,EAAI+E,EAAM5E,OAAQ,CACxE,GAAI4E,EAAMhF,EAAIiF,EAAMjF,EAAIiF,EAAM9E,OAAS8E,EAAMjF,EAAIgF,EAAMhF,EAAIgF,EAAM7E,MAC/D,OAAO,KAEP,IAAIF,EACA2E,EACAI,EAAM/E,EAAIgF,EAAMhF,EAAIgF,EAAM7E,QAC5BH,EAAIgF,EAAMhF,EAAIgF,EAAM7E,OACpBwE,EAAWI,EAAM/E,EAAIA,IAErBA,EAAI+E,EAAM/E,EAAI+E,EAAM5E,OACpBwE,EAAWK,EAAMhF,EAAIA,GAEvB,IAAMnB,EAAMG,KAAKJ,IAAImG,EAAMhF,EAAIgF,EAAM7E,MAAO8E,EAAMjF,EAAIiF,EAAM9E,OACtDtB,EAAMI,KAAKH,IAAIkG,EAAMhF,EAAGiF,EAAMjF,GAEpC,MAAO,CAAE2E,UAAW7F,EAAMD,EAAK+F,WAAU5E,EAD/Bf,KAAKC,OAAOL,EAAMC,GAAO,GACSmB,IAAG4E,YAAY,GAG7D,GAAIG,EAAMhF,EAAIiF,EAAMjF,EAAIiF,EAAM9E,OAAS8E,EAAMjF,EAAIgF,EAAMhF,EAAIgF,EAAM7E,MAAO,CACtE,IAAIH,EACA4E,EACAI,EAAMhF,EAAIiF,EAAMjF,EAAIiF,EAAM9E,OAC5BH,EAAIiF,EAAMjF,EAAIiF,EAAM9E,MACpByE,EAAWI,EAAMhF,EAAIA,IAErBA,EAAIgF,EAAMhF,EAAIgF,EAAM7E,MACpByE,EAAWK,EAAMjF,EAAIA,GAEvB,IAAMlB,EAAMG,KAAKJ,IAAImG,EAAM/E,EAAI+E,EAAM5E,OAAQ6E,EAAMhF,EAAIgF,EAAM7E,QACvDvB,EAAMI,KAAKH,IAAIkG,EAAM/E,EAAGgF,EAAMhF,GAEpC,MAAO,CAAE0E,UAAW7F,EAAMD,EAAK+F,WAAU5E,IAAGC,EADlChB,KAAKC,OAAOL,EAAMC,GAAO,GACY+F,YAAY,GAE3D,OAAO,K,ICvVEe,E,YA/Mb,WAAYpI,GAAQ,IAAD,8BACjB,4CAAMA,KACDqI,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAKG,iBAAmB,EAAKA,iBAAiBH,KAAtB,gBACxB,EAAKpG,gBAAkB,EAAKA,gBAAgBoG,KAArB,gBACvB,EAAKnG,YAAc,EAAKA,YAAYmG,KAAjB,gBACnB,EAAKxH,SAAW,EAAKA,SAASwH,KAAd,gBAChB,EAAKI,UAAY,EAAKA,UAAUJ,KAAf,gBACjB,EAAKK,KAAO,GACZ,EAAKC,MAAQ,CACXC,cAAc,EACdC,KAAM,EACNC,MAAO,CAAC,WAAY,gBACpB1I,QAAS,CACP,CACE,CACEO,KAAM,aACNM,KAAM,WACNW,SAAU,EAAK6G,YAGnB,KAvBa,E,iFA6BjBM,KAAKC,kBACLD,KAAKN,YACLQ,OAAOC,iBAAiB,SAAUH,KAAKX,UACvCa,OAAOC,iBAAiB,UAAWH,KAAKT,WACxCW,OAAOC,iBAAiB,QAASH,KAAKR,SACtCQ,KAAKI,MAAQF,OAAOG,sBAAsBL,KAAKP,oB,6CAI/CS,OAAOI,oBAAoB,SAAUN,KAAKX,UAC1Ca,OAAOI,oBAAoB,UAAWN,KAAKT,WAC3CW,OAAOI,oBAAoB,QAASN,KAAKR,SACzCU,OAAOK,qBAAqBP,KAAKI,S,iCAIjCJ,KAAKC,oB,gCAGGlI,GACRA,EAAMyI,iBACDR,KAAKL,KAAK5H,EAAMN,OACnBuI,KAAKS,WAAW1I,EAAMN,KACtBuI,KAAKL,KAAK5H,EAAMN,MAAO,EACnBuI,KAAKU,aACPV,KAAKJ,MAAMe,MAAMC,cAAcZ,KAAKL,S,8BAKlC5H,GACNA,EAAMyI,iBACNR,KAAKL,KAAK5H,EAAMN,MAAO,EACnBuI,KAAKU,aACPV,KAAKJ,MAAMe,MAAMC,cAAcZ,KAAKL,Q,iCAI7BlI,GAAM,IAAD,EACUuI,KAAKJ,MAArBxG,EADM,EACNA,IAAKyH,EADC,EACDA,OACD,WAARpJ,GACFuI,KAAKc,SAAS,CACZjB,cAAeG,KAAKJ,MAAMC,eAG9B,IAAIkB,EAAK,EACLC,EAAK,EACG,YAARvJ,EACFuJ,GAAM,EACW,cAARvJ,EACTuJ,EAAK,EACY,cAARvJ,EACTsJ,GAAM,EACW,eAARtJ,IACTsJ,EAAK,GAEI,IAAPA,GAAmB,IAAPC,GACiC,IAA3C5H,EAAIW,KAAK8G,EAAOpH,EAAIuH,GAAIH,EAAOrH,EAAIuH,IACrCf,KAAKc,SAAS,CACZD,OAAQ,CACNrH,EAAGqH,EAAOrH,EAAIuH,EACdtH,EAAGoH,EAAOpH,EAAIuH,O,oCAQtBhB,KAAKc,SAAS,CACZjB,cAAc,M,yCAKhBG,KAAKiB,WACLjB,KAAKI,MAAQF,OAAOG,sBAAsBL,KAAKP,oB,oCAI/CO,KAAKc,SAAS,CAAEhB,MAAOE,KAAKJ,MAAME,KAAO,GAAKE,KAAKJ,MAAMG,MAAMxI,W,wCAI/DyI,KAAKc,SAAS,CAAEhB,MAAOE,KAAKJ,MAAME,KAAOE,KAAKJ,MAAMG,MAAMxI,OAAS,GAAKyI,KAAKJ,MAAMG,MAAMxI,W,+BAGlF8B,EAAQ3B,GACXA,IAAU2B,EAAO3B,QACnBsI,KAAKkB,UAAU7H,EAAQ3B,GACvBsI,KAAKmB,iB,gCAIC9H,EAAQ3B,M,wCAIhB,IAAM0J,EAASpB,KAAKoB,OACdC,EAAOD,EAAOE,wBACpBF,EAAOzH,MAAQ0H,EAAK1H,MACpByH,EAAOxH,OAASyH,EAAKzH,S,kCAIrB,IAAIR,EAAMM,EAAgB,CAAEC,MAAO,IAAKC,OAAQ,GAAIM,KAAM,IAAML,MAAO,GAAIM,QAAS,EAAGC,QAAS,KAC1FyG,ED5FH,SAAmCzH,GAGxC,IAH8C,IACtCO,EAAwBP,EAAxBO,MAAOC,EAAiBR,EAAjBQ,OAAQG,EAASX,EAATW,KACjBwH,EAAU,GACPjK,EAAI,EAAGA,EAAIsC,EAAQtC,IAC1BiK,EAAQ/J,KAAK,IAAIwC,MAAML,GAAOM,KAAK,IAErC,GAAyB,IAArBb,EAAIuB,MAAMpD,OACZ,MAAO,CAAEiC,EAAG,EAAGC,EAAG,GAEpB,IAAMK,EAAWV,EAAIuB,MAAM,GACvBnB,EAAIf,KAAKC,MAAMoB,EAASN,EAAIM,EAASH,MAAQ,GAC7CF,EAAIhB,KAAKC,MAAMoB,EAASL,EAAIK,EAASF,OAAS,GAC9CoB,EAAO,EACLwG,EAAI,GAEV,IADAA,EAAEhK,KAAK,CAAEgC,IAAGC,MACL+H,EAAEjK,OAAS,GAEhB,IADA,IAAMuD,EAAO0G,EAAEjK,OACND,EAAI,EAAGA,EAAIwD,EAAMxD,IAAK,CAC7B,IAAMmK,EAAMD,EAAEE,QACd1G,EAAOjB,EAAK0H,EAAIhI,GAAGgI,EAAIjI,GACvB,IAAK,IAAIkC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAMiG,EAAMpI,EAAYmC,GACpB+F,EAAIjI,EAAImI,EAAInI,EAAI,GAAKiI,EAAIjI,EAAImI,EAAInI,EAAIG,EAAQ,GAAK8H,EAAIhI,EAAIkI,EAAIlI,EAAI,GAAKgI,EAAIhI,EAAIkI,EAAIlI,EAAIG,EAAS,GAGzD,IAAvCG,EAAK0H,EAAIhI,EAAIkI,EAAIlI,GAAGgI,EAAIjI,EAAImI,EAAInI,IACY,IAA1C+H,EAAQE,EAAIhI,EAAIkI,EAAIlI,GAAGgI,EAAIjI,EAAImI,EAAInI,KACrC+H,EAAQE,EAAIhI,EAAIkI,EAAIlI,GAAGgI,EAAIjI,EAAImI,EAAInI,GAAK,EACxCgI,EAAEhK,KAAK,CAAEgC,EAAGiI,EAAIjI,EAAImI,EAAInI,EAAGC,EAAGgI,EAAIhI,EAAIkI,EAAIlI,MAMpD,IAAMmI,EAAaxI,EAAIuB,MAAMK,EAAO,GAGpC,MAAO,CAAExB,EAFTA,EAAIf,KAAKC,MAAMkJ,EAAWpI,EAAIoI,EAAWjI,MAAQ,GAErCF,EADZA,EAAIhB,KAAKC,MAAMkJ,EAAWnI,EAAImI,EAAWhI,OAAS,ICwDjCiI,CAA0BzI,GACzC4G,KAAKc,SAAS,CACZ1H,MACAyH,a,iCAKF,GAAKb,KAAKJ,OAAUI,KAAKJ,MAAMxG,IAA/B,CADS,MAI8B4G,KAAKJ,MAAMxG,IAA1CO,EAJC,EAIDA,MAAOC,EAJN,EAIMA,OAAQG,EAJd,EAIcA,KAAMY,EAJpB,EAIoBA,MACvBkG,EAASb,KAAKJ,MAAMiB,OACpBiB,EAAM9B,KAAKoB,OAAOW,WAAW,MACnCD,EAAIE,UAAY,UAChBF,EAAIG,SAAS,EAAG,EAAGjC,KAAKoB,OAAOzH,MAAOqG,KAAKoB,OAAOxH,QAMlD,IALA,IAAMsI,EAAYzJ,KAAKC,MAAMsH,KAAKoB,OAAOzH,MAAQA,GAC3CwI,EAAa1J,KAAKC,MAAMsH,KAAKoB,OAAOxH,OAASA,GAC7CwI,EAAU3J,KAAKC,OAAOsH,KAAKoB,OAAOzH,MAAQA,EAAQuI,GAAa,GAC/DG,EAAU5J,KAAKC,OAAOsH,KAAKoB,OAAOxH,OAASA,EAASuI,GAAc,GAClEG,EAAS,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAChI7I,EAAI,EAAGA,EAAIG,EAAQH,IAC1B,IAAK,IAAID,EAAI,EAAGA,EAAIG,EAAOH,IACzB,GAAmB,IAAfO,EAAKN,GAAGD,GAAU,CACpB,GAAIO,EAAKN,GAAGD,IAAMmB,EAAMpD,OAAQ,CAC9B,IAAMyD,EAAOL,EAAMZ,EAAKN,GAAGD,GAAK,GAC5BwB,EAAK4C,MACPkE,EAAIE,UAAYM,GAAQtH,EAAK4C,MAAQ,GAAK0E,EAAO/K,QAEjDuK,EAAIE,UAAY,eAGlBF,EAAIE,UAAY,UAElBF,EAAIG,SAASG,EAAU5I,EAAI0I,EAAY,EAAGG,EAAU5I,EAAI0I,EAAa,EAAGD,EAAY,EAAGC,EAAa,GACpGL,EAAIE,UAAY,UAChBF,EAAIS,KAAO,gBACXT,EAAIU,UAAY,SAChBV,EAAIW,aAAe,SACnBX,EAAIY,SAAS3I,EAAKN,GAAGD,GAAGmJ,WAAYP,EAAU5I,EAAI0I,EAAYA,EAAY,EAAGG,EAAU5I,EAAI0I,EAAaA,EAAa,GAK3H,IAAMS,EACDnK,KAAKC,MAAMiC,EAAM,GAAGnB,EAAImB,EAAM,GAAGhB,MAAQ,GADxCiJ,EAEDnK,KAAKC,MAAMiC,EAAM,GAAGlB,EAAIkB,EAAM,GAAGf,OAAS,GAG/CkI,EAAIE,UAAY,UAChBF,EAAIS,KAAO,iBACXT,EAAIU,UAAY,SAChBV,EAAIW,aAAe,SACnBX,EAAIY,SAAS,IAAKN,EAAUQ,EAASV,EAAYA,EAAY,EAAGG,EAAUO,EAAST,EAAaA,EAAa,GAE7GL,EAAIE,UAAY,UAChBF,EAAIS,KAAO,iBACXT,EAAIU,UAAY,SAChBV,EAAIW,aAAe,SACnBX,EAAIY,SAAS,IAAKN,EAAUvB,EAAOrH,EAAI0I,EAAYA,EAAY,EAAGG,EAAUxB,EAAOpH,EAAI0I,EAAaA,EAAa,M,+BAGzG,IAAD,OACP,OACE,yBAAKtK,GAAG,UACN,4BAAQA,GAAG,SAASgL,IAAK,SAAAC,GAAI,OAAI,EAAK1B,OAAS0B,GAAMlK,QAASoH,KAAKpH,UACnE,kBAAC,EAAD,CAAUI,KAAMgH,KAAKJ,MAAMC,aAAc5G,MAAO+G,KAAKJ,MAAMG,MAAMC,KAAKJ,MAAME,MAAOzI,QAAS2I,KAAKJ,MAAMvI,QAAQ2I,KAAKJ,MAAME,MAAO5G,gBAAiB8G,KAAK9G,gBAAiBC,YAAa6G,KAAK7G,YAAarB,SAAUkI,KAAKlI,gB,GA1M5MiL,IAAMC,WCLJC,QACW,cAA7B/C,OAAOgD,SAASC,UAEa,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2b4629ca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst DescriptionControl = (props) => {\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      {control.description}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SelectControl = (props) => {\r\n  function onChange(event) {\r\n    props.onChange(control, event.target.value);\r\n  }\r\n  const { control } = props;\r\n  const options = [];\r\n  for (let i = 0; i < control.options.length; i++) {\r\n    options.push(\r\n      (<option key={i} value={i}>{control.options[i]}</option>)\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"control\">\r\n      <label htmlFor={control.name}>{control.name}</label>\r\n      <select id={control.name} className=\"select-css\" value={control.value} onChange={onChange}>\r\n        {options}\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst BoolControl = (props) => {\r\n  function onChange(event) {\r\n    props.onChange(control, event.target.checked);\r\n  }\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      <label className=\"clickable\" htmlFor={control.name}><input className=\"clickable\" id={control.name} type=\"checkbox\" checked={control.value} onChange={onChange} />{control.name}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst IntControl = (props) => {\r\n  function onChange(event) {\r\n    props.onChange(control, event.target.value);\r\n  }\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      <label htmlFor={control.name}>{control.name} {control.value}</label>\r\n      <input id={control.name} className=\"clickable\" type=\"range\" min={control.min} max={control.max} value={control.value} onChange={onChange} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst FloatControl = (props) => {\r\n  const factor = 1000;\r\n  function onChange(event) {\r\n    props.onChange(control, event.target.value / factor);\r\n  }\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      <label htmlFor={control.name}>{control.name} {control.value.toFixed(3)}</label>\r\n      <input id={control.name} className=\"clickable\" type=\"range\" min={Math.floor(control.min * factor)} max={Math.floor(control.max * factor)} value={Math.floor(control.value * factor)} onChange={onChange} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst FunctionControl = (props) => {\r\n  function onClick(event) {\r\n    control.function();\r\n  }\r\n  const { control } = props;\r\n  return (\r\n    <div className=\"control\">\r\n      <button onClick={onClick}>{control.name}</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Controls = ({ show, title, onClickPrevious, onClickNext, onChange, options }) => {\r\n  if (!show) {\r\n    return null;\r\n  }\r\n  let controls\r\n  if (options) {\r\n    controls = options.map((option, index) => {\r\n      switch (option.type) {\r\n        case 'description':\r\n          return <DescriptionControl key={index} control={option} />\r\n        case 'select':\r\n          return <SelectControl key={index} control={option} onChange={onChange} />\r\n        case 'bool':\r\n          return <BoolControl key={index} control={option} onChange={onChange} />\r\n        case 'int':\r\n          return <IntControl key={index} control={option} onChange={onChange} />\r\n        case 'float':\r\n          return <FloatControl key={index} control={option} onChange={onChange} />\r\n        case 'function':\r\n          return <FunctionControl key={index} control={option} />\r\n        default:\r\n          return (\r\n            <div key={index} className=\"control\">{option.type} is not supported</div>\r\n          );\r\n      }\r\n    });\r\n  }\r\n  return (\r\n    <div id=\"controls\">\r\n      <div className=\"none\">\r\n        <span className=\"left\" onClick={onClickPrevious}>❮ PREV</span>\r\n        <span className=\"right\" onClick={onClickNext}>NEXT ❯</span>\r\n        <div className=\"center title\">{title}</div>\r\n      </div>\r\n      <div>\r\n        {controls}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","const _directions = [\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 },\r\n  { x: -1, y: 0 }\r\n];\r\n\r\nexport function generateDungeon(options) {\r\n  const { width, height, zones, bossRoom } = options;\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(0));\r\n  }\r\n\r\n  const map = {\r\n    width,\r\n    height,\r\n    data\r\n  }\r\n\r\n  _generateRooms(map, options);\r\n\r\n  _sortRooms_LargestToSmallest(map.rooms);\r\n\r\n  let { maxRooms } = options;\r\n\r\n  if (zones && zones > 1) {\r\n    _generateZones(map, zones);\r\n    if (bossRoom) {\r\n      const room = map.rooms[0];\r\n      const zone = map.zones[0];\r\n      if (room.width <= zone.width && room.height <= zone.height) {\r\n        room.x = Math.floor(zone.x);\r\n        room.y = Math.floor(zone.y + (zone.height - room.height) / 2);\r\n      }\r\n    }\r\n    const placedRooms = _placeRoomsByZone(map, maxRooms);\r\n    if (maxRooms !== undefined) {\r\n      maxRooms -= placedRooms;\r\n    }\r\n  } else {\r\n    if (bossRoom) {\r\n      const room = map.rooms[0];\r\n      if (room.width <= width - 2 && room.height <= height - 2) {\r\n        room.x = Math.floor((width - room.width) / 2);\r\n        room.y = Math.floor((height - room.height) / 2);\r\n      }\r\n    }\r\n  }\r\n\r\n  _placeRooms(map, maxRooms);\r\n\r\n  _connectNearbyRooms(map);\r\n\r\n  _connectDistantRooms(map);\r\n\r\n  _sortRooms_Id(map.rooms);\r\n\r\n  return map;\r\n}\r\n\r\nexport function getPlayerStartingLocation(map) {\r\n  const { width, height, data } = map;\r\n  const visited = [];\r\n  for (let i = 0; i < height; i++) {\r\n    visited.push(new Array(width).fill(0));\r\n  }\r\n  if (map.rooms.length === 0) {\r\n    return { x: 1, y: 1 };\r\n  }\r\n  const bossRoom = map.rooms[0];\r\n  let x = Math.floor(bossRoom.x + bossRoom.width / 2);\r\n  let y = Math.floor(bossRoom.y + bossRoom.height / 2);\r\n  let room = 1;\r\n  const q = [];\r\n  q.push({ x, y });\r\n  while (q.length > 0) {\r\n    const size = q.length;\r\n    for (let i = 0; i < size; i++) {\r\n      const top = q.shift();\r\n      room = data[top.y][top.x];\r\n      for (let j = 0; j < 4; j++) {\r\n        const dir = _directions[j];\r\n        if (top.x + dir.x < 0 || top.x + dir.x > width - 1 || top.y + dir.y < 0 || top.y + dir.y > height - 1) {\r\n          continue;\r\n        }\r\n        if (data[top.y + dir.y][top.x + dir.x] !== 0) {\r\n          if (visited[top.y + dir.y][top.x + dir.x] === 0) {\r\n            visited[top.y + dir.y][top.x + dir.x] = 1;\r\n            q.push({ x: top.x + dir.x, y: top.y + dir.y });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const playerRoom = map.rooms[room - 1];\r\n  x = Math.floor(playerRoom.x + playerRoom.width / 2);\r\n  y = Math.floor(playerRoom.y + playerRoom.height / 2);\r\n  return { x, y };\r\n}\r\n\r\nfunction _generateRooms(map, options) {\r\n  const { width, height } = map;\r\n  let { goal, minSize, maxSize } = options;\r\n  if (!goal) {\r\n    goal = 0.5;\r\n  }\r\n  if (!minSize) {\r\n    minSize = 3;\r\n  }\r\n  if (!maxSize) {\r\n    maxSize = Math.max(Math.floor(Math.min(width / 4, height / 4)), minSize);\r\n  }\r\n  const roomSize = [];\r\n  let power = 0;\r\n  for (let s = maxSize; s >= minSize; s--) {\r\n    const count = Math.pow(2, power++);\r\n    for (let c = 0; c < count; c++) {\r\n      roomSize.push(s);\r\n    }\r\n  }\r\n\r\n  let rooms = [];\r\n  const areaGoal = width * height * goal;\r\n  let area = 0;\r\n  while (area < areaGoal) {\r\n    const size = _pickRandom(roomSize);\r\n    const room = { width: size, height: size };\r\n    if (Math.random() > 0.3) {\r\n      if (Math.random() < 0.5) {\r\n        room.width += 2;\r\n      } else {\r\n        room.height += 2;\r\n      }\r\n    }\r\n    rooms.push(room)\r\n    area += room.width * room.height;\r\n  }\r\n  map.rooms = rooms;\r\n}\r\n\r\nfunction _generateZones(map, count) {\r\n  const { width, height } = map;\r\n  const loc = [];\r\n  for (let i = 0; i < count; i++) {\r\n    loc[i] = i;\r\n  }\r\n\r\n  _shuffle(loc);\r\n\r\n  const xStep = Math.floor((width - 2) / count);\r\n  const yStep = Math.floor((height - 2) / count);\r\n\r\n  const zones = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const zone = { x: i * xStep + 1, y: loc[i] * yStep + 1, width: xStep, height: yStep };\r\n    zones.push(zone);\r\n  }\r\n\r\n  map.zones = zones;\r\n}\r\n\r\nfunction _placeRoomsByZone(map, maxRooms) {\r\n  const { width, height, rooms, zones } = map;\r\n\r\n  let placedRooms = 0;\r\n  let zone = 0;\r\n  const roomCount = rooms.length;\r\n  for (let i = 0; i < roomCount; i++) {\r\n    if (maxRooms && placedRooms === maxRooms) {\r\n      break;\r\n    }\r\n    const room = rooms[i];\r\n    if (room.hasOwnProperty('x') && room.hasOwnProperty('y')) {\r\n      continue;\r\n    }\r\n    const minX = zones[zone].x;\r\n    const maxX = Math.min(zones[zone].x + zones[zone].width, width - room.width - 1);\r\n    const minY = zones[zone].y;\r\n    const maxY = Math.min(zones[zone].y + zones[zone].height, height - room.height - 1);\r\n    if (minX + room.width > width - 1 || minY + room.height > height - 1) {\r\n      continue;\r\n    }\r\n    let isPlaced = false;\r\n    for (let t = 0; t < 100; t++) {\r\n      room.x = _range(minX, maxX);\r\n      room.y = _range(minY, maxY);\r\n      let overlap = false;\r\n      for (let j = 0; j < roomCount; j++) {\r\n        if (j === i || !rooms[j].hasOwnProperty('x') || !rooms[j].hasOwnProperty('y')) {\r\n          continue;\r\n        }\r\n        if (_doRoomsOverlap(room, rooms[j], 1, 1)) {\r\n          overlap = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!overlap) {\r\n        isPlaced = true;\r\n        break;\r\n      }\r\n    }\r\n    if (isPlaced) {\r\n      placedRooms++;\r\n      zone = (zone + 1) % zones.length;\r\n    } else {\r\n      delete room.x;\r\n      delete room.y;\r\n    }\r\n  }\r\n\r\n  return placedRooms;\r\n}\r\n\r\nfunction _placeRooms(map, maxRooms) {\r\n  const { width, height, rooms } = map;\r\n\r\n  let placedRooms = 0;\r\n  const roomCount = rooms.length;\r\n  for (let i = 0; i < roomCount; i++) {\r\n    if (maxRooms !== undefined && placedRooms === maxRooms) {\r\n      break;\r\n    }\r\n    const room = rooms[i];\r\n    if (room.hasOwnProperty('x') && room.hasOwnProperty('y')) {\r\n      continue;\r\n    }\r\n    let placed = false;\r\n    for (let t = 0; t < 1000; t++) {\r\n      room.x = _range(1, width - room.width - 1);\r\n      room.y = _range(1, height - room.height - 1);\r\n      let overlap = false;\r\n      for (let j = 0; j < roomCount; j++) {\r\n        if (j === i || !rooms[j].hasOwnProperty('x') || !rooms[j].hasOwnProperty('y')) {\r\n          continue;\r\n        }\r\n        if (_doRoomsOverlap(room, rooms[j], room.width >= 7 ? 3 : 1, room.height >= 7 ? 3 : 1)) {\r\n          overlap = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!overlap) {\r\n        placed = true;\r\n        break;\r\n      }\r\n    }\r\n    if (placed) {\r\n      placedRooms++;\r\n    } else {\r\n      delete room.x;\r\n      delete room.y;\r\n    }\r\n  }\r\n\r\n  map.rooms = map.rooms.filter((room) => room.x || room.y);\r\n\r\n  return map.rooms.length;\r\n}\r\n\r\nfunction _connectNearbyRooms({ width, height, data, rooms }) {\r\n  const roomCount = rooms.length;\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    room.id = i + 1;\r\n    for (let h = 0; h < room.height; h++) {\r\n      for (let w = 0; w < room.width; w++) {\r\n        data[room.y + h][room.x + w] = room.id;\r\n      }\r\n    }\r\n  }\r\n\r\n  const links = [];\r\n  for (let i = 0; i <= roomCount; i++) {\r\n    links.push(i);\r\n  }\r\n\r\n  const roomConnectors = [];\r\n\r\n  for (let y = 1; y < height - 1; y++) {\r\n    for (let x = 1; x < width - 1; x++) {\r\n      if (data[y][x] === 0) {\r\n        if (data[y - 1][x] === 0 && data[y + 1][x] === 0 && data[y][x - 1] !== 0 && data[y][x + 1] !== 0) {\r\n          if (data[y][x - 1] < data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x - 1], r2: data[y][x + 1] });\r\n          } else if (data[y][x - 1] > data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x + 1], r2: data[y][x - 1] });\r\n          }\r\n        } else if (data[y][x - 1] === 0 && data[y][x + 1] === 0 && data[y - 1][x] !== 0 && data[y + 1][x] !== 0) {\r\n          if (data[y - 1][x] < data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y - 1][x], r2: data[y + 1][x] });\r\n          } else if (data[y - 1][x] > data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y + 1][x], r2: data[y - 1][x] });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _sortRoomConnectors(roomConnectors);\r\n\r\n  const conCount = roomConnectors.length;\r\n  let cur;\r\n  let nxt;\r\n  for (cur = 0; cur < conCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < conCount; nxt++) {\r\n      if (roomConnectors[nxt].r1 !== roomConnectors[cur].r1 || roomConnectors[nxt].r2 !== roomConnectors[cur].r2) {\r\n        break;\r\n      }\r\n    }\r\n    if (links[roomConnectors[cur].r1] !== links[roomConnectors[cur].r2]) {\r\n      const apl = roomConnectors[Math.floor(cur + (nxt - cur) / 2)];\r\n      const min = Math.min(links[apl.r1], links[apl.r2]);\r\n      const max = Math.max(links[apl.r1], links[apl.r2]);\r\n      links[apl.r1] = min;\r\n      links[apl.r2] = min;\r\n      for (let i = 1; i <= roomCount; i++) {\r\n        if (links[i] === max) {\r\n          links[i] = min;\r\n        }\r\n      }\r\n      data[apl.y][apl.x] = roomCount + 1;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    room.group = links[room.id];\r\n  }\r\n}\r\n\r\nfunction _connectDistantRooms(map) {\r\n  const { data, rooms } = map;\r\n\r\n  const roomCount = rooms.length;\r\n\r\n  _sortRooms_GroupAndId(rooms);\r\n\r\n  let groups = 0;\r\n\r\n  let cur;\r\n  let nxt;\r\n\r\n  for (cur = 0; cur < roomCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < roomCount; nxt++) {\r\n      if (rooms[nxt].group !== rooms[cur].group) {\r\n        break;\r\n      }\r\n    }\r\n    groups++;\r\n    for (let apl = cur; apl < nxt; apl++) {\r\n      rooms[apl].group = groups;\r\n    }\r\n  }\r\n\r\n  const roomInfoList = {};\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    for (let j = i + 1; j < roomCount; j++) {\r\n      if (rooms[i].group === rooms[j].group) {\r\n        continue;\r\n      }\r\n\r\n      const alignmentAndDistance = _getAlignmentAndDistance(rooms[i], rooms[j]);\r\n\r\n      if (!alignmentAndDistance) {\r\n        continue;\r\n      }\r\n\r\n      const { alignment, distance, x, y, horizontal } = alignmentAndDistance;\r\n\r\n      if (alignment === 0) {\r\n        continue;\r\n      }\r\n\r\n      const g1 = rooms[i].group;\r\n      const g2 = rooms[j].group;\r\n      const key = g1 + '_' + g2;\r\n\r\n      if (!roomInfoList[key]) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      } else if (roomInfoList[key].distance > distance || (roomInfoList[key].distance === distance && roomInfoList[key].alignment < alignmentAndDistance)) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      }\r\n    }\r\n  }\r\n\r\n  const groupConnectors = [];\r\n\r\n  for (let prop in roomInfoList) {\r\n    if (roomInfoList.hasOwnProperty(prop)) {\r\n      groupConnectors.push(roomInfoList[prop]);\r\n    }\r\n  }\r\n\r\n  _sortGroupConnectors(groupConnectors);\r\n\r\n  const groupLinks = [];\r\n\r\n  for (let i = 0; i <= groups; i++) {\r\n    groupLinks.push(i);\r\n  }\r\n\r\n  for (let i = 0; i < groupConnectors.length; i++) {\r\n    const groupConnector = groupConnectors[i];\r\n    if (groupLinks[groupConnector.g1] !== groupLinks[groupConnector.g2]) {\r\n      const min = Math.min(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      const max = Math.max(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      groupLinks[groupConnector.g1] = min;\r\n      groupLinks[groupConnector.g2] = min;\r\n      for (let i = 1; i <= groups; i++) {\r\n        if (groupLinks[i] === max) {\r\n          groupLinks[i] = min;\r\n        }\r\n      }\r\n\r\n      const { x, y, distance, horizontal } = groupConnector;\r\n\r\n      if (horizontal) {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y][x + o] = roomCount + 1;\r\n        }\r\n      } else {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y + o][x] = roomCount + 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  map.connected = true;\r\n\r\n  for (let i = 1; i <= groups; i++) {\r\n    if (groupLinks[i] !== 1) {\r\n      map.connected = false;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _range(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction _pickRandom(data) {\r\n  return data[Math.floor(Math.random() * data.length)];\r\n}\r\n\r\nfunction _shuffle(data) {\r\n  const n = data.length;\r\n  for (let i = n - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const t = data[i];\r\n    data[i] = data[j];\r\n    data[j] = t;\r\n  }\r\n}\r\n\r\nfunction _sortRooms_LargestToSmallest(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    const priArea = pri.width * pri.height;\r\n    const secArea = sec.width * sec.height;\r\n    if (priArea < secArea) {\r\n      return 1;\r\n    } else if (priArea > secArea) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRooms_GroupAndId(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.group < sec.group) {\r\n      return -1;\r\n    } else if (pri.group > sec.group) {\r\n      return 1;\r\n    }\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRooms_Id(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRoomConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.r1 < sec.r1) { return -1; }\r\n    else if (pri.r1 > sec.r1) { return 1; }\r\n    if (pri.r2 < sec.r2) { return -1; }\r\n    else if (pri.r2 > sec.r2) { return 1; }\r\n    if (pri.x < sec.x) { return -1; }\r\n    else if (pri.x > sec.x) { return 1; }\r\n    if (pri.y < sec.y) { return -1; }\r\n    else if (pri.y > sec.y) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortGroupConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.distance < sec.distance) { return -1; }\r\n    else if (pri.distance > sec.distance) { return 1; }\r\n    if (pri.alignment < sec.alignment) { return -1; }\r\n    else if (pri.alignment > sec.alignment) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _doRoomsOverlap(pri, sec, bx, by) {\r\n  if (pri.x >= sec.x + sec.width + bx || sec.x >= pri.x + pri.width + bx) {\r\n    return false;\r\n  }\r\n  if (pri.y >= sec.y + sec.height + by || sec.y >= pri.y + pri.height + by) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction _getAlignmentAndDistance(room1, room2) {\r\n  if (room1.y > room2.y + room2.height || room2.y > room1.y + room1.height) {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      return null;\r\n    } else {\r\n      let y;\r\n      let distance;\r\n      if (room1.y > room2.y + room2.height) {\r\n        y = room2.y + room2.height\r\n        distance = room1.y - y;\r\n      } else {\r\n        y = room1.y + room1.height;\r\n        distance = room2.y - y;\r\n      }\r\n      const max = Math.min(room1.x + room1.width, room2.x + room2.width);\r\n      const min = Math.max(room1.x, room2.x)\r\n      const x = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: false };\r\n    }\r\n  } else {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      let x\r\n      let distance;\r\n      if (room1.x > room2.x + room2.width) {\r\n        x = room2.x + room2.width;\r\n        distance = room1.x - x;\r\n      } else {\r\n        x = room1.x + room1.width;\r\n        distance = room2.x - x;\r\n      }\r\n      const max = Math.min(room1.y + room1.height, room2.y + room2.height);\r\n      const min = Math.max(room1.y, room2.y)\r\n      const y = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Controls from './Controls';\r\nimport { generateDungeon, getPlayerStartingLocation } from '../lib/map';\r\n\r\n// Take Home Projects - Build a Roguelike Dungeon Crawler Game\r\n// Objective: Build a CodePen.io app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/apLXEJ/.\r\n// Fulfill the below user stories. Use whichever libraries or APIs you need. Give it your own personal style.\r\n// User Story: I have health, a level, and a weapon. I can pick up a better weapon. I can pick up health items.\r\n// User Story: All the items and enemies on the map are arranged at random.\r\n// User Story: I can move throughout a map, discovering items.\r\n// User Story: I can move anywhere within the map's boundaries, but I can't move through an enemy until I've beaten it.\r\n// User Story: Much of the map is hidden. When I take a step, all spaces that are within a certain number of spaces from me are revealed.\r\n// User Story: When I beat an enemy, the enemy goes away and I get XP, which eventually increases my level.\r\n// User Story: When I fight an enemy, we take turns damaging each other until one of us loses. I do damage based off of my level and my weapon. The enemy does damage based off of its level. Damage is somewhat random within a range.\r\n// User Story: When I find and beat the boss, I win.\r\n// User Story: The game should be challenging, but theoretically winnable.\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\r\n    this.onClickPrevious = this.onClickPrevious.bind(this);\r\n    this.onClickNext = this.onClickNext.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n    this.updateMap = this.updateMap.bind(this);\r\n    this.keys = {};\r\n    this.state = {\r\n      showControls: false,\r\n      mode: 0,\r\n      modes: ['Map Mode', 'Explore Mode'],\r\n      options: [\r\n        [\r\n          {\r\n            name: 'Update Map',\r\n            type: 'function',\r\n            function: this.updateMap\r\n          }\r\n        ],\r\n        []\r\n      ]\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._resizeViewport();\r\n    this.updateMap();\r\n    window.addEventListener('resize', this.onResize);\r\n    window.addEventListener('keydown', this.onKeyDown);\r\n    window.addEventListener('keyup', this.onKeyUp);\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.onResize);\r\n    window.removeEventListener('keydown', this.onKeyDown);\r\n    window.removeEventListener('keyup', this.onKeyUp);\r\n    window.cancelAnimationFrame(this.frame);\r\n  }\r\n\r\n  onResize() {\r\n    this._resizeViewport();\r\n  }\r\n\r\n  onKeyDown(event) {\r\n    event.preventDefault();\r\n    if (!this.keys[event.key]) {\r\n      this.onKeyPress(event.key);\r\n      this.keys[event.key] = true;\r\n      if (this.captureKeys) {\r\n        this.state.scene.keyboardState(this.keys);\r\n      }\r\n    }\r\n  }\r\n\r\n  onKeyUp(event) {\r\n    event.preventDefault();\r\n    this.keys[event.key] = false;\r\n    if (this.captureKeys) {\r\n      this.state.scene.keyboardState(this.keys);\r\n    }\r\n  }\r\n\r\n  onKeyPress(key) {\r\n    const { map, player } = this.state;\r\n    if (key === 'Escape') {\r\n      this.setState({\r\n        showControls: !this.state.showControls\r\n      });\r\n    }\r\n    let dx = 0;\r\n    let dy = 0;\r\n    if (key === 'ArrowUp') {\r\n      dy = -1;\r\n    } else if (key === 'ArrowDown') {\r\n      dy = 1;\r\n    } else if (key === 'ArrowLeft') {\r\n      dx = -1;\r\n    } else if (key === 'ArrowRight') {\r\n      dx = 1;\r\n    }\r\n    if (dx !== 0 || dy !== 0) {\r\n      if (map.data[player.y + dy][player.x + dx] !== 0) {\r\n        this.setState({\r\n          player: {\r\n            x: player.x + dx,\r\n            y: player.y + dy\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  onCloseMenu() {\r\n    this.setState({\r\n      showControls: false\r\n    });\r\n  }\r\n\r\n  onAnimationFrame() {\r\n    this._drawMap();\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  onClickNext() {\r\n    this.setState({ mode: (this.state.mode + 1) % this.state.modes.length });\r\n  }\r\n\r\n  onClickPrevious() {\r\n    this.setState({ mode: (this.state.mode + this.state.modes.length - 1) % this.state.modes.length });\r\n  }\r\n\r\n  onChange(option, value) {\r\n    if (value !== option.value) {\r\n      this.setOption(option, value);\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  setOption(option, value) {\r\n  }\r\n\r\n  _resizeViewport() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n  }\r\n\r\n  updateMap() {\r\n    let map = generateDungeon({ width: 112, height: 63, goal: 0.25, zones: 20, minSize: 4, maxSize: 10 });\r\n    const player = getPlayerStartingLocation(map);\r\n    this.setState({\r\n      map,\r\n      player\r\n    });\r\n  }\r\n\r\n  _drawMap() {\r\n    if (!this.state || !this.state.map) {\r\n      return;\r\n    }\r\n    const { width, height, data, rooms } = this.state.map;\r\n    const player = this.state.player;\r\n    const ctx = this.canvas.getContext('2d');\r\n    ctx.fillStyle = '#000000';\r\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    const cellWidth = Math.floor(this.canvas.width / width);\r\n    const cellHeight = Math.floor(this.canvas.height / height);\r\n    const xOffset = Math.floor((this.canvas.width - width * cellWidth) / 2);\r\n    const yOffset = Math.floor((this.canvas.height - height * cellHeight) / 2);\r\n    const colors = ['#7F0000', '#007F00', '#00007F', '#7F7F00', '#7F007F', '#007F7F', '#7F3F3F', '#3F7F3F', '#3F3F7F', '#7F7F3F', '#7F3F7F', '#3F7F7F'];\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        if (data[y][x] !== 0) {\r\n          if (data[y][x] <= rooms.length) {\r\n            const room = rooms[data[y][x] - 1];\r\n            if (room.group) {\r\n              ctx.fillStyle = colors[(room.group - 1) % colors.length];\r\n            } else {\r\n              ctx.fillStyle = '#3F3F3F';\r\n            }\r\n          } else {\r\n            ctx.fillStyle = '#3F3F3F';\r\n          }\r\n          ctx.fillRect(xOffset + x * cellWidth + 1, yOffset + y * cellHeight + 1, cellWidth - 2, cellHeight - 2);\r\n          ctx.fillStyle = '#FFFFFF';\r\n          ctx.font = '8px monospace';\r\n          ctx.textAlign = 'center';\r\n          ctx.textBaseline = 'middle';\r\n          ctx.fillText(data[y][x].toString(), xOffset + x * cellWidth + cellWidth / 2, yOffset + y * cellHeight + cellHeight / 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    const boss = {\r\n      x: Math.floor(rooms[0].x + rooms[0].width / 2),\r\n      y: Math.floor(rooms[0].y + rooms[0].height / 2)\r\n    };\r\n\r\n    ctx.fillStyle = '#FFFFFF';\r\n    ctx.font = '50px monospace';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText('O', xOffset + boss.x * cellWidth + cellWidth / 2, yOffset + boss.y * cellHeight + cellHeight / 2);\r\n\r\n    ctx.fillStyle = '#FFFFFF';\r\n    ctx.font = '50px monospace';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillText('X', xOffset + player.x * cellWidth + cellWidth / 2, yOffset + player.y * cellHeight + cellHeight / 2);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"screen\">\r\n        <canvas id=\"canvas\" ref={elem => this.canvas = elem} onClick={this.onClick}></canvas>\r\n        <Controls show={this.state.showControls} title={this.state.modes[this.state.mode]} options={this.state.options[this.state.mode]} onClickPrevious={this.onClickPrevious} onClickNext={this.onClickNext} onChange={this.onChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}