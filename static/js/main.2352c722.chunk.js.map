{"version":3,"sources":["lib/map.js","components/App.js","serviceWorker.js","index.js"],"names":["_directions","x","y","generateDungeon","options","width","height","zones","data","push","Array","fill","map","goal","minSize","maxSize","_makeOdd","Math","max","floor","min","roomSize","power","s","count","pow","c","rooms","areaGoal","area","size","_pickRandom","room","random","_generateRooms","loc","i","length","j","t","_shuffle","xStep","yStep","zone","_generateZones","_sortRooms_LargestToSmallest","roomCount","minX","maxX","minY","maxY","placed","_range","overlap","hasOwnProperty","_doRoomsOverlap","_placeRoomsByZone","filter","_placeRooms","h","w","links","roomConnectors","r1","r2","connectors","sort","pri","sec","cur","nxt","conCount","apl","id","group","_connectNearbyRooms","_sortRooms_GroupAndId","groups","roomInfoList","alignmentAndDistance","_getAlignmentAndDistance","alignment","distance","horizontal","g1","g2","key","room1","room2","groupConnectors","prop","groupLinks","groupConnector","o","_sortRooms_Id","connected","_connectDistantRooms","value","priArea","secArea","bx","by","App","props","onResize","bind","onKeyDown","onKeyUp","onAnimationFrame","onClick","keys","state","showOverlay","this","_resizeViewport","_updateMap","window","addEventListener","frame","requestAnimationFrame","removeEventListener","cancelAnimationFrame","event","preventDefault","onKeyPress","captureKeys","scene","keyboardState","player","setState","dx","dy","_drawMap","canvas","rect","getBoundingClientRect","visited","bossRoom","q","top","shift","dir","playerRoom","getPlayerStartingLocation","ctx","getContext","fillStyle","fillRect","cellWidth","cellHeight","xOffset","yOffset","colors","font","textAlign","textBaseline","fillText","toString","beginPath","arc","PI","JSON","stringify","ref","elem","hidden","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2352c722.chunk.js","sourcesContent":["const _directions = [\r\n  { x: 0, y: -1 },\r\n  { x: 1, y: 0 },\r\n  { x: 0, y: 1 },\r\n  { x: -1, y: 0 }\r\n];\r\n\r\nexport function generateDungeon(options) {\r\n  const { width, height, zones } = options;\r\n  const data = [];\r\n  for (let y = 0; y < height; y++) {\r\n    data.push(new Array(width).fill(0));\r\n  }\r\n\r\n  const map = {\r\n    width,\r\n    height,\r\n    data\r\n  }\r\n\r\n  _generateRooms(map, options);\r\n\r\n  if (zones && zones > 1) {\r\n    _generateZones(map, zones);\r\n    _placeRoomsByZone(map);\r\n  }\r\n\r\n  _placeRooms(map);\r\n\r\n  _connectNearbyRooms(map);\r\n\r\n  _connectDistantRooms(map);\r\n\r\n  return map;\r\n}\r\n\r\nexport function getPlayerStartingLocation(map) {\r\n  const { width, height, data } = map;\r\n  const visited = [];\r\n  for (let i = 0; i < height; i++) {\r\n    visited.push(new Array(width).fill(0));\r\n  }\r\n  if (map.rooms.length === 0) {\r\n    return { x: 1, y: 1 };\r\n  }\r\n  const bossRoom = map.rooms[0];\r\n  let x = Math.floor(bossRoom.x + bossRoom.width / 2);\r\n  let y = Math.floor(bossRoom.y + bossRoom.height / 2);\r\n  let room = 1;\r\n  const q = [];\r\n  q.push({ x, y });\r\n  while (q.length > 0) {\r\n    const size = q.length;\r\n    for (let i = 0; i < size; i++) {\r\n      const top = q.shift();\r\n      room = data[top.y][top.x];\r\n      for (let j = 0; j < 4; j++) {\r\n        const dir = _directions[j];\r\n        if (top.x + dir.x < 0 || top.x + dir.x > width - 1 || top.y + dir.y < 0 || top.y + dir.y > height - 1) {\r\n          continue;\r\n        }\r\n        if (data[top.y + dir.y][top.x + dir.x] !== 0) {\r\n          if (visited[top.y + dir.y][top.x + dir.x] === 0) {\r\n            visited[top.y + dir.y][top.x + dir.x] = 1;\r\n            q.push({ x: top.x + dir.x, y: top.y + dir.y });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  const playerRoom = map.rooms[room - 1];\r\n  x = Math.floor(playerRoom.x + playerRoom.width / 2);\r\n  y = Math.floor(playerRoom.y + playerRoom.height / 2);\r\n  return { x, y };\r\n}\r\n\r\nfunction _generateRooms(map, options) {\r\n  const { width, height } = map;\r\n  let { goal, minSize, maxSize } = options;\r\n  if (!goal) {\r\n    goal = 0.5;\r\n  }\r\n  if (!minSize) {\r\n    minSize = 3;\r\n  }\r\n  if (!maxSize) {\r\n    maxSize = _makeOdd(Math.max(Math.floor(Math.min(width / 4, height / 4)), minSize));;\r\n  }\r\n  const roomSize = [];\r\n  let power = 0;\r\n  for (let s = maxSize; s >= minSize; s -= 2) {\r\n    const count = Math.pow(2, power++);\r\n    for (let c = 0; c < count; c++) {\r\n      roomSize.push(s);\r\n    }\r\n  }\r\n\r\n  let rooms = [];\r\n  const areaGoal = width * height * goal;\r\n  let area = 0;\r\n  while (area < areaGoal) {\r\n    const size = _pickRandom(roomSize);\r\n    const room = { width: size, height: size };\r\n    if (Math.random() > 0.3) {\r\n      if (Math.random() < 0.5) {\r\n        room.width += 2;\r\n      } else {\r\n        room.height += 2;\r\n      }\r\n    }\r\n    rooms.push(room)\r\n    area += room.width * room.height;\r\n  }\r\n  map.rooms = rooms;\r\n}\r\n\r\nfunction _generateZones(map, count) {\r\n  const { width, height } = map;\r\n  const loc = [];\r\n  for (let i = 0; i < count; i++) {\r\n    loc[i] = i;\r\n  }\r\n\r\n  _shuffle(loc);\r\n\r\n  const xStep = Math.floor((width - 2) / count);\r\n  const yStep = Math.floor((height - 2) / count);\r\n\r\n  const zones = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const zone = { x: i * xStep + 1, y: loc[i] * yStep + 1, width: xStep, height: yStep };\r\n    zones.push(zone);\r\n  }\r\n\r\n  map.zones = zones;\r\n}\r\n\r\nfunction _placeRoomsByZone(map) {\r\n  const { width, height, rooms, zones } = map;\r\n\r\n  _sortRooms_LargestToSmallest(rooms);\r\n\r\n  let zone = 0;\r\n  const roomCount = rooms.length;\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    const minX = zones[zone].x;\r\n    const maxX = Math.min(zones[zone].x + zones[zone].width, width - room.width - 1);\r\n    const minY = zones[zone].y;\r\n    const maxY = Math.min(zones[zone].y + zones[zone].height, height - room.height - 1);\r\n    if (minX + room.width > width - 1 || minY + room.height > height - 1) {\r\n      continue;\r\n    }\r\n    let placed = false;\r\n    for (let t = 0; t < 100; t++) {\r\n      room.x = _makeOdd(_range(minX, maxX));\r\n      room.y = _makeOdd(_range(minY, maxY));\r\n      let overlap = false;\r\n      for (let j = 0; j < roomCount; j++) {\r\n        if (j === i || !rooms[j].hasOwnProperty('x') || !rooms[j].hasOwnProperty('y')) {\r\n          continue;\r\n        }\r\n        if (_doRoomsOverlap(room, rooms[j], 1, 1)) {\r\n          overlap = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!overlap) {\r\n        placed = true;\r\n        break;\r\n      }\r\n    }\r\n    if (placed) {\r\n      zone = (zone + 1) % zones.length;\r\n    } else {\r\n      delete room.x;\r\n      delete room.y;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _placeRooms(map) {\r\n  const { width, height, rooms } = map;\r\n\r\n  _sortRooms_LargestToSmallest(rooms);\r\n\r\n  const roomCount = rooms.length;\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    if (room.hasOwnProperty('x') && room.hasOwnProperty('y')) {\r\n      continue;\r\n    }\r\n    let placed = false;\r\n    for (let t = 0; t < 1000; t++) {\r\n      room.x = _makeOdd(_range(1, width - room.width - 1));\r\n      room.y = _makeOdd(_range(1, height - room.height - 1));\r\n      let overlap = false;\r\n      for (let j = 0; j < roomCount; j++) {\r\n        if (j === i || !rooms[j].hasOwnProperty('x') || !rooms[j].hasOwnProperty('y')) {\r\n          continue;\r\n        }\r\n        if (_doRoomsOverlap(room, rooms[j], room.width >= 7 ? 3 : 1, room.height >= 7 ? 3 : 1)) {\r\n          overlap = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!overlap) {\r\n        placed = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!placed) {\r\n      delete room.x;\r\n      delete room.y;\r\n    }\r\n  }\r\n\r\n  map.rooms = map.rooms.filter((room) => room.x || room.y);\r\n}\r\n\r\nfunction _connectNearbyRooms({ width, height, data, rooms }) {\r\n  const roomCount = rooms.length;\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    for (let h = 0; h < room.height; h++) {\r\n      for (let w = 0; w < room.width; w++) {\r\n        data[room.y + h][room.x + w] = i + 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  const links = [];\r\n  for (let i = 0; i <= roomCount; i++) {\r\n    links.push(i);\r\n  }\r\n\r\n  const roomConnectors = [];\r\n\r\n  for (let y = 1; y < height - 1; y++) {\r\n    for (let x = 1; x < width - 1; x++) {\r\n      if (data[y][x] === 0) {\r\n        if (data[y - 1][x] === 0 && data[y + 1][x] === 0 && data[y][x - 1] !== 0 && data[y][x + 1] !== 0) {\r\n          if (data[y][x - 1] < data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x - 1], r2: data[y][x + 1] });\r\n          } else if (data[y][x - 1] > data[y][x + 1]) {\r\n            roomConnectors.push({ x, y, r1: data[y][x + 1], r2: data[y][x - 1] });\r\n          }\r\n        } else if (data[y][x - 1] === 0 && data[y][x + 1] === 0 && data[y - 1][x] !== 0 && data[y + 1][x] !== 0) {\r\n          if (data[y - 1][x] < data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y - 1][x], r2: data[y + 1][x] });\r\n          } else if (data[y - 1][x] > data[y + 1][x]) {\r\n            roomConnectors.push({ x, y, r1: data[y + 1][x], r2: data[y - 1][x] });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _sortRoomConnectors(roomConnectors);\r\n\r\n  const conCount = roomConnectors.length;\r\n  let cur;\r\n  let nxt;\r\n  for (cur = 0; cur < conCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < conCount; nxt++) {\r\n      if (roomConnectors[nxt].r1 !== roomConnectors[cur].r1 || roomConnectors[nxt].r2 !== roomConnectors[cur].r2) {\r\n        break;\r\n      }\r\n    }\r\n    if (links[roomConnectors[cur].r1] !== links[roomConnectors[cur].r2]) {\r\n      const apl = roomConnectors[Math.floor(cur + (nxt - cur) / 2)];\r\n      const min = Math.min(links[apl.r1], links[apl.r2]);\r\n      const max = Math.max(links[apl.r1], links[apl.r2]);\r\n      links[apl.r1] = min;\r\n      links[apl.r2] = min;\r\n      for (let i = 1; i <= roomCount; i++) {\r\n        if (links[i] === max) {\r\n          links[i] = min;\r\n        }\r\n      }\r\n      data[apl.y][apl.x] = roomCount + 1;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    const room = rooms[i];\r\n    room.id = i + 1;\r\n    room.group = links[room.id];\r\n  }\r\n}\r\n\r\nfunction _connectDistantRooms(map) {\r\n  const { data, rooms } = map;\r\n\r\n  const roomCount = rooms.length;\r\n\r\n  _sortRooms_GroupAndId(rooms);\r\n\r\n  let groups = 0;\r\n\r\n  let cur;\r\n  let nxt;\r\n\r\n  for (cur = 0; cur < roomCount; cur = nxt) {\r\n    for (nxt = cur + 1; nxt < roomCount; nxt++) {\r\n      if (rooms[nxt].group !== rooms[cur].group) {\r\n        break;\r\n      }\r\n    }\r\n    groups++;\r\n    for (let apl = cur; apl < nxt; apl++) {\r\n      rooms[apl].group = groups;\r\n    }\r\n  }\r\n\r\n  const roomInfoList = {};\r\n\r\n  for (let i = 0; i < roomCount; i++) {\r\n    for (let j = i + 1; j < roomCount; j++) {\r\n      if (rooms[i].group === rooms[j].group) {\r\n        continue;\r\n      }\r\n\r\n      const alignmentAndDistance = _getAlignmentAndDistance(rooms[i], rooms[j]);\r\n\r\n      if (!alignmentAndDistance) {\r\n        continue;\r\n      }\r\n\r\n      const { alignment, distance, x, y, horizontal } = alignmentAndDistance;\r\n\r\n      if (alignment === 0) {\r\n        continue;\r\n      }\r\n\r\n      const g1 = rooms[i].group;\r\n      const g2 = rooms[j].group;\r\n      const key = g1 + '_' + g2;\r\n\r\n      if (!roomInfoList[key]) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      } else if (roomInfoList[key].distance > distance || (roomInfoList[key].distance === distance && roomInfoList[key].alignment < alignmentAndDistance)) {\r\n        roomInfoList[key] = { distance, g1, g2, room1: rooms[i].id, room2: rooms[j].id, alignment, x, y, horizontal };\r\n      }\r\n    }\r\n  }\r\n\r\n  const groupConnectors = [];\r\n\r\n  for (let prop in roomInfoList) {\r\n    if (roomInfoList.hasOwnProperty(prop)) {\r\n      groupConnectors.push(roomInfoList[prop]);\r\n    }\r\n  }\r\n\r\n  _sortGroupConnectors(groupConnectors);\r\n\r\n  const groupLinks = [];\r\n\r\n  for (let i = 0; i <= groups; i++) {\r\n    groupLinks.push(i);\r\n  }\r\n\r\n  for (let i = 0; i < groupConnectors.length; i++) {\r\n    const groupConnector = groupConnectors[i];\r\n    if (groupLinks[groupConnector.g1] !== groupLinks[groupConnector.g2]) {\r\n      const min = Math.min(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      const max = Math.max(groupLinks[groupConnector.g1], groupLinks[groupConnector.g2]);\r\n      groupLinks[groupConnector.g1] = min;\r\n      groupLinks[groupConnector.g2] = min;\r\n      for (let i = 1; i <= groups; i++) {\r\n        if (groupLinks[i] === max) {\r\n          groupLinks[i] = min;\r\n        }\r\n      }\r\n\r\n      const { x, y, distance, horizontal } = groupConnector;\r\n\r\n      if (horizontal) {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y][x + o] = roomCount + 1;\r\n        }\r\n      } else {\r\n        for (let o = 0; o < distance; o++) {\r\n          data[y + o][x] = roomCount + 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _sortRooms_Id(rooms);\r\n\r\n  map.connected = true;\r\n\r\n  for (let i = 1; i <= groups; i++) {\r\n    if (groupLinks[i] !== 1) {\r\n      map.connected = false;\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\nfunction _range(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction _makeOdd(value) {\r\n  return Math.floor(value / 2) * 2 + 1;\r\n}\r\n\r\nfunction _pickRandom(data) {\r\n  return data[Math.floor(Math.random() * data.length)];\r\n}\r\n\r\nfunction _shuffle(data) {\r\n  const n = data.length;\r\n  for (let i = n - 1; i >= 0; i--) {\r\n    const j = Math.floor(Math.random() * i);\r\n    const t = data[i];\r\n    data[i] = data[j];\r\n    data[j] = t;\r\n  }\r\n}\r\n\r\nfunction _sortRooms_LargestToSmallest(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    const priArea = pri.width * pri.height;\r\n    const secArea = sec.width * sec.height;\r\n    if (priArea < secArea) {\r\n      return 1;\r\n    } else if (priArea > secArea) {\r\n      return -1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRooms_GroupAndId(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.group < sec.group) {\r\n      return -1;\r\n    } else if (pri.group > sec.group) {\r\n      return 1;\r\n    }\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRooms_Id(rooms) {\r\n  rooms.sort((pri, sec) => {\r\n    if (pri.id < sec.id) {\r\n      return -1;\r\n    } else if (pri.id > sec.id) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortRoomConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.r1 < sec.r1) { return -1; }\r\n    else if (pri.r1 > sec.r1) { return 1; }\r\n    if (pri.r2 < sec.r2) { return -1; }\r\n    else if (pri.r2 > sec.r2) { return 1; }\r\n    if (pri.x < sec.x) { return -1; }\r\n    else if (pri.x > sec.x) { return 1; }\r\n    if (pri.y < sec.y) { return -1; }\r\n    else if (pri.y > sec.y) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _sortGroupConnectors(connectors) {\r\n  connectors.sort((pri, sec) => {\r\n    if (pri.distance < sec.distance) { return -1; }\r\n    else if (pri.distance > sec.distance) { return 1; }\r\n    if (pri.alignment < sec.alignment) { return -1; }\r\n    else if (pri.alignment > sec.alignment) { return 1; }\r\n    return 0;\r\n  });\r\n}\r\n\r\nfunction _doRoomsOverlap(pri, sec, bx, by) {\r\n  if (pri.x >= sec.x + sec.width + bx || sec.x >= pri.x + pri.width + bx) {\r\n    return false;\r\n  }\r\n  if (pri.y >= sec.y + sec.height + by || sec.y >= pri.y + pri.height + by) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction _getAlignmentAndDistance(room1, room2) {\r\n  if (room1.y > room2.y + room2.height || room2.y > room1.y + room1.height) {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      return null;\r\n    } else {\r\n      let y;\r\n      let distance;\r\n      if (room1.y > room2.y + room2.height) {\r\n        y = room2.y + room2.height\r\n        distance = room1.y - y;\r\n      } else {\r\n        y = room1.y + room1.height;\r\n        distance = room2.y - y;\r\n      }\r\n      const max = Math.min(room1.x + room1.width, room2.x + room2.width);\r\n      const min = Math.max(room1.x, room2.x)\r\n      const x = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: false };\r\n    }\r\n  } else {\r\n    if (room1.x > room2.x + room2.width || room2.x > room1.x + room1.width) {\r\n      let x\r\n      let distance;\r\n      if (room1.x > room2.x + room2.width) {\r\n        x = room2.x + room2.width;\r\n        distance = room1.x - x;\r\n      } else {\r\n        x = room1.x + room1.width;\r\n        distance = room2.x - x;\r\n      }\r\n      const max = Math.min(room1.y + room1.height, room2.y + room2.height);\r\n      const min = Math.max(room1.y, room2.y)\r\n      const y = Math.floor((min + max) / 2);\r\n      return { alignment: max - min, distance, x, y, horizontal: true };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { generateDungeon, getPlayerStartingLocation } from '../lib/map';\r\n\r\n// Take Home Projects - Build a Roguelike Dungeon Crawler Game\r\n// Objective: Build a CodePen.io app that is functionally similar to this: https://codepen.io/freeCodeCamp/full/apLXEJ/.\r\n// Fulfill the below user stories. Use whichever libraries or APIs you need. Give it your own personal style.\r\n// User Story: I have health, a level, and a weapon. I can pick up a better weapon. I can pick up health items.\r\n// User Story: All the items and enemies on the map are arranged at random.\r\n// User Story: I can move throughout a map, discovering items.\r\n// User Story: I can move anywhere within the map's boundaries, but I can't move through an enemy until I've beaten it.\r\n// User Story: Much of the map is hidden. When I take a step, all spaces that are within a certain number of spaces from me are revealed.\r\n// User Story: When I beat an enemy, the enemy goes away and I get XP, which eventually increases my level.\r\n// User Story: When I fight an enemy, we take turns damaging each other until one of us loses. I do damage based off of my level and my weapon. The enemy does damage based off of its level. Damage is somewhat random within a range.\r\n// User Story: When I find and beat the boss, I win.\r\n// User Story: The game should be challenging, but theoretically winnable.\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.onKeyDown = this.onKeyDown.bind(this);\r\n    this.onKeyUp = this.onKeyUp.bind(this);\r\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\r\n    this.onClick = this.onClick.bind(this);\r\n    this.keys = {};\r\n    this.state = {\r\n      showOverlay: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._resizeViewport();\r\n    this._updateMap();\r\n    window.addEventListener('resize', this.onResize);\r\n    window.addEventListener('keydown', this.onKeyDown);\r\n    window.addEventListener('keyup', this.onKeyUp);\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.onResize);\r\n    window.removeEventListener('keydown', this.onKeyDown);\r\n    window.removeEventListener('keyup', this.onKeyUp);\r\n    window.cancelAnimationFrame(this.frame);\r\n  }\r\n\r\n  onResize() {\r\n    this._resizeViewport();\r\n  }\r\n\r\n  onKeyDown(event) {\r\n    event.preventDefault();\r\n    if (!this.keys[event.key]) {\r\n      this.onKeyPress(event.key);\r\n      this.keys[event.key] = true;\r\n      if (this.captureKeys) {\r\n        this.state.scene.keyboardState(this.keys);\r\n      }\r\n    }\r\n  }\r\n\r\n  onKeyUp(event) {\r\n    event.preventDefault();\r\n    this.keys[event.key] = false;\r\n    if (this.captureKeys) {\r\n      this.state.scene.keyboardState(this.keys);\r\n    }\r\n  }\r\n\r\n  onKeyPress(key) {\r\n    const { map, player } = this.state;\r\n    if (key === 'Escape') {\r\n      this.setState({\r\n        showOverlay: !this.state.showOverlay\r\n      });\r\n    }\r\n    let dx = 0;\r\n    let dy = 0;\r\n    if (key === 'ArrowUp') {\r\n      dy = -1;\r\n    } else if (key === 'ArrowDown') {\r\n      dy = 1;\r\n    } else if (key === 'ArrowLeft') {\r\n      dx = -1;\r\n    } else if (key === 'ArrowRight') {\r\n      dx = 1;\r\n    }\r\n    if (dx !== 0 || dy !== 0) {\r\n      if (map.data[player.y + dy][player.x + dx] !== 0) {\r\n        this.setState({\r\n          player: {\r\n            x: player.x + dx,\r\n            y: player.y + dy\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  onAnimationFrame() {\r\n    this._drawMap();\r\n    this.frame = window.requestAnimationFrame(this.onAnimationFrame);\r\n  }\r\n\r\n  onClick() {\r\n    this._updateMap();\r\n  }\r\n\r\n  _resizeViewport() {\r\n    const canvas = this.canvas;\r\n    const rect = canvas.getBoundingClientRect()\r\n    canvas.width = rect.width;\r\n    canvas.height = rect.height;\r\n  }\r\n\r\n  _updateMap() {\r\n    let map = generateDungeon({ width: 107, height: 55, goal: 0.25, zones: 20, minSize: 3, maxSize: 7 });\r\n    const player = getPlayerStartingLocation(map);\r\n    this.setState({\r\n      map,\r\n      player\r\n    });\r\n  }\r\n\r\n  _drawMap() {\r\n    if (!this.state || !this.state.map) {\r\n      return;\r\n    }\r\n    const { width, height, data, rooms } = this.state.map;\r\n    const player = this.state.player;\r\n    const ctx = this.canvas.getContext('2d');\r\n    ctx.fillStyle = '#000000';\r\n    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    const cellWidth = Math.floor(this.canvas.width / width);\r\n    const cellHeight = Math.floor(this.canvas.height / height);\r\n    const xOffset = Math.floor((this.canvas.width - width * cellWidth) / 2);\r\n    const yOffset = Math.floor((this.canvas.height - height * cellHeight) / 2);\r\n    const colors = ['#7F0000', '#007F00', '#00007F', '#7F7F00', '#7F007F', '#007F7F', '#7F3F3F', '#3F7F3F', '#3F3F7F', '#7F7F3F', '#7F3F7F', '#3F7F7F'];\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        if (data[y][x] !== 0) {\r\n          if (data[y][x] <= rooms.length) {\r\n            const room = rooms[data[y][x] - 1];\r\n            if (room.group) {\r\n              ctx.fillStyle = colors[(room.group - 1) % colors.length];\r\n            } else {\r\n              ctx.fillStyle = '#3F3F3F';\r\n            }\r\n          } else {\r\n            ctx.fillStyle = '#3F3F3F';\r\n          }\r\n          ctx.fillRect(xOffset + x * cellWidth + 1, yOffset + y * cellHeight + 1, cellWidth - 2, cellHeight - 2);\r\n          ctx.fillStyle = '#FFFFFF';\r\n          ctx.font = '8px monospace';\r\n          ctx.textAlign = 'center';\r\n          ctx.textBaseline = 'middle';\r\n          ctx.fillText(data[y][x].toString(), xOffset + x * cellWidth + cellWidth / 2, yOffset + y * cellHeight + cellHeight / 2);\r\n        }\r\n      }\r\n    }\r\n\r\n    ctx.fillStyle = '#7F7FFF';\r\n    ctx.beginPath();\r\n    ctx.arc(xOffset + player.x * cellWidth + cellWidth / 2, yOffset + player.y * cellHeight + cellHeight / 2, Math.min(cellWidth / 4, cellHeight / 4) - 1, 0, Math.PI * 2);\r\n    ctx.fill();\r\n  }\r\n\r\n  render() {\r\n    let zones = null;\r\n    if (this.state && this.state.map && this.state.map.zones) {\r\n      zones = this.state.map.zones.map((zone, key) => (<div key={key}>{JSON.stringify(zone, null, 2)}</div>))\r\n    }\r\n    let rooms = null;\r\n    if (this.state && this.state.map && this.state.map.rooms) {\r\n      rooms = this.state.map.rooms.map((room, key) => (<div key={key}>{JSON.stringify(room, null, 2)}</div>))\r\n    }\r\n    return (\r\n      <div id=\"screen\">\r\n        <canvas id=\"canvas\" ref={elem => this.canvas = elem} onClick={this.onClick}></canvas>\r\n        <div id=\"overlay\" hidden={!this.state.showOverlay}>{zones}{rooms}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}